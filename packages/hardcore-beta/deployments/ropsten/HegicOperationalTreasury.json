{
  "address": "0x7F2D10f16654EF31Fb513Eb1A4336A4896F49624",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IOptionsManager",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxLockupPeriod",
          "type": "uint256"
        },
        {
          "internalType": "contract IHegicStakeAndCover",
          "name": "_stakeandcoverPool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_benchmark",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "Expired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Replenished",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGY_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "benchmark",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeAndCoverBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "expiration",
          "type": "uint32"
        }
      ],
      "name": "lockLiquidityFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedByStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedLiquidity",
      "outputs": [
        {
          "internalType": "enum IHegicOperationalTreasury.LockedLiquidityState",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "amount",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "premium",
          "type": "uint128"
        },
        {
          "internalType": "uint32",
          "name": "expiration",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedPremium",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "contract IOptionsManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLockupPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockedLiquidityID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "payOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "replenish",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setBenchmark",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeandcoverPool",
      "outputs": [
        {
          "internalType": "contract IHegicStakeAndCover",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "lockedLiquidityID",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x235b88c30ea1a8562bdb3eee3d73425c893bf7e4a724637bdce571cf8d609c3f",
  "receipt": {
    "to": null,
    "from": "0x4fC6C9491530f9e41D5d8Fe123eD99068919093C",
    "contractAddress": "0x7F2D10f16654EF31Fb513Eb1A4336A4896F49624",
    "transactionIndex": 38,
    "gasUsed": "1558453",
    "logsBloom": "0x
    "blockHash": "0x93fc880dbdcb550b7980b5fb4f80719765e32bb7d945d2341c70f408afeb96fe",
    "transactionHash": "0x235b88c30ea1a8562bdb3eee3d73425c893bf7e4a724637bdce571cf8d609c3f",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 12287273,
        "transactionHash": "0x235b88c30ea1a8562bdb3eee3d73425c893bf7e4a724637bdce571cf8d609c3f",
        "address": "0x7F2D10f16654EF31Fb513Eb1A4336A4896F49624",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004fc6c9491530f9e41d5d8fe123ed99068919093c",
          "0x0000000000000000000000004fc6c9491530f9e41d5d8fe123ed99068919093c"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x93fc880dbdcb550b7980b5fb4f80719765e32bb7d945d2341c70f408afeb96fe"
      }
    ],
    "blockNumber": 12287273,
    "cumulativeGasUsed": "3415131",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd3F41e2239c848Ed576eB4dc04074Ad6049A00f1",
    "0x09811E2011669DfBDd138A19B92790fc6B790ED3",
    3888000,
    "0xE079131e8ac9088399ceAC32638bf13aF9FBd447",
    "100000000000"
  ],
  "solcInputHash": "0a548ebdda8d7001933b70b1421b32db",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IOptionsManager\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxLockupPeriod\",\"type\":\"uint256\"},{\"internalType\":\"contract IHegicStakeAndCover\",\"name\":\"_stakeandcoverPool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_benchmark\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Expired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Replenished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"benchmark\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeAndCoverBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"name\":\"lockLiquidityFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedByStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedLiquidity\",\"outputs\":[{\"internalType\":\"enum IHegicOperationalTreasury.LockedLiquidityState\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"premium\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"expiration\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedPremium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"contract IOptionsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedLiquidityID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"payOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"replenish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setBenchmark\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeandcoverPool\",\"outputs\":[{\"internalType\":\"contract IHegicStakeAndCover\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockedLiquidityID\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokens()\":{\"params\":{\"amount\":\"The amount of tokens to add*\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"lockLiquidityFor(address,uint128,uint32)\":{\"params\":{\"amount\":\"The amount of options strategy contract\",\"expiration\":\"The options strategy expiration time*\",\"holder\":\"The option strategy holder address\"}},\"payOff(uint256,uint256,address)\":{\"params\":{\"account\":\"The holder address*\",\"amount\":\"The amount to pay off\",\"lockedLiquidityID\":\"The option contract ID\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"setBenchmark(uint256)\":{\"params\":{\"value\":\"The benchmark value*\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"unlock(uint256)\":{\"params\":{\"lockedLiquidityID\":\"The option contract ID*\"}},\"withdraw(address,uint256)\":{\"params\":{\"amount\":\"The amount to withdraw*\",\"to\":\"The recipient address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addTokens()\":{\"notice\":\"Used for adding deposited tokens (e.g. premiums) to the contract's totalBalance\"},\"lockLiquidityFor(address,uint128,uint32)\":{\"notice\":\"Used for locking liquidity in an active options strategy\"},\"payOff(uint256,uint256,address)\":{\"notice\":\"Used for paying off the profits if an option is exercised in-the-money\"},\"replenish()\":{\"notice\":\"replenishUsed for replenishing of the Hegic Operational Treasury contract*\"},\"setBenchmark(uint256)\":{\"notice\":\"Used for setting the initial contract benchmark for calculating future profits or losses\"},\"unlock(uint256)\":{\"notice\":\"Used for unlocking liquidity after an expiration\"},\"withdraw(address,uint256)\":{\"notice\":\"Used for withdrawing deposited tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool/HegicOperationalTreasury.sol\":\"HegicOperationalTreasury\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    function grantRole(bytes32 role, address account) external;\\n\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x084f583de2c714665b0304529fe8b826a2809f29d03314e4dd9eea926e4bb0f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd644260d8e4e64563a7adba96d774dbaac6ae89c2ee58ef49a19850ff1239b08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b4820cac4f127869f6eb496c1d74fa6ac86ed24071e0f94742e6aef20e7252c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/OptionsManager/IOptionsManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @notice The interface for the contract\\n *   that tokenizes options as ERC721.\\n **/\\n\\ninterface IOptionsManager is IERC721 {\\n    /**\\n     * @param holder The option buyer address\\n     **/\\n    function createOptionFor(address holder) external returns (uint256);\\n\\n    /**\\n     * @param tokenId The ERC721 token ID linked to the option\\n     **/\\n    function tokenPool(uint256 tokenId) external returns (address pool);\\n\\n    /**\\n     * @param spender The option buyer address or another address\\n     *   with the granted permission to buy/exercise options on the user's behalf\\n     * @param tokenId The ERC721 token ID linked to the option\\n     **/\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x8112a4f2f84024d8d97414d17306134350b05e55612125d8b863d0b8892d7156\",\"license\":\"GPL-3.0-or-later\"},\"contracts/OptionsManager/OptionsManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2021 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"./IOptionsManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n * @author 0mllwntrmt3\\n * @title Hegic Protocol V8888 Options Manager Contract\\n * @notice The contract that buys the options contracts for the options holders\\n * as well as checks whether the contract that is used for buying/exercising\\n * options has been been granted with the permission to do it on the user's behalf.\\n **/\\n\\ncontract OptionsManager is\\n    IOptionsManager,\\n    ERC721(\\\"Hegic V8888 Options (Tokenized)\\\", \\\"HOT8888\\\"),\\n    AccessControl\\n{\\n    bytes32 public constant HEGIC_POOL_ROLE = keccak256(\\\"HEGIC_POOL_ROLE\\\");\\n    uint256 public nextTokenId = 0;\\n    mapping(uint256 => address) public override tokenPool;\\n\\n    constructor() {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    }\\n\\n    /**\\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\\n     * https://eips.ethereum.org/EIPS/eip-165\\n     **/\\n    function createOptionFor(address holder)\\n        public\\n        override\\n        onlyRole(HEGIC_POOL_ROLE)\\n        returns (uint256 id)\\n    {\\n        id = nextTokenId++;\\n        tokenPool[id] = msg.sender;\\n        _safeMint(holder, id);\\n    }\\n\\n    /**\\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\\n     * https://eips.ethereum.org/EIPS/eip-165\\n     **/\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override(ERC721, AccessControl, IERC165)\\n        returns (bool)\\n    {\\n        return\\n            interfaceId == type(IOptionsManager).interfaceId ||\\n            AccessControl.supportsInterface(interfaceId) ||\\n            ERC721.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @notice Used for checking whether the user has approved\\n     * the contract to buy/exercise the options on her behalf.\\n     * @param spender The address of the contract\\n     * that is used for exercising the options\\n     * @param tokenId The ERC721 token ID that is linked to the option\\n     **/\\n    function isApprovedOrOwner(address spender, uint256 tokenId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner ||\\n            getApproved(tokenId) == spender ||\\n            isApprovedForAll(owner, spender));\\n    }\\n}\\n\",\"keccak256\":\"0xb9f0359cf7f6b41ab60e030196ff5fb3c8458172ed963d893f9fb9b2bb2c3db7\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool/HegicOperationalTreasury.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../OptionsManager/OptionsManager.sol\\\";\\nimport \\\"./IHegicOperationalTreasury.sol\\\";\\nimport \\\"./IHegicStakeAndCover.sol\\\";\\n\\ncontract HegicOperationalTreasury is\\n    IHegicOperationalTreasury,\\n    AccessControl,\\n    ReentrancyGuard\\n{\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable override token;\\n    IOptionsManager public immutable override manager;\\n    IHegicStakeAndCover public stakeandcoverPool;\\n    bytes32 public constant STRATEGY_ROLE = keccak256(\\\"STRATEGY_ROLE\\\");\\n    mapping(uint256 => LockedLiquidity) public lockedLiquidity;\\n    mapping(address => uint256) public override lockedByStrategy;\\n    uint256 public override benchmark;\\n\\n    uint256 public override lockedPremium;\\n    uint256 public override totalLocked;\\n    uint256 public override totalBalance;\\n    uint256 public maxLockupPeriod;\\n\\n    constructor(\\n        IERC20 _token,\\n        IOptionsManager _manager,\\n        uint256 _maxLockupPeriod,\\n        IHegicStakeAndCover _stakeandcoverPool,\\n        uint256 _benchmark\\n    ) {\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        token = _token;\\n        manager = _manager;\\n        maxLockupPeriod = _maxLockupPeriod;\\n        stakeandcoverPool = _stakeandcoverPool;\\n        benchmark = _benchmark;\\n    }\\n\\n    /**\\n     * @notice Used for withdrawing deposited\\n     * tokens from the contract\\n     * @param to The recipient address\\n     * @param amount The amount to withdraw\\n     **/\\n    function withdraw(address to, uint256 amount)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        _withdraw(to, amount);\\n    }\\n\\n    /**replenish\\n     * @notice Used for replenishing of\\n     * the Hegic Operational Treasury contract\\n     **/\\n    function replenish() external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _replenish(0);\\n    }\\n\\n    function getStakeAndCoverBalance()\\n        external\\n        view\\n        override\\n        returns (uint256 balance)\\n    {\\n        return stakeandcoverPool.availableBalance();\\n    }\\n\\n    /**\\n     * @notice Used for locking liquidity in an active options strategy\\n     * @param holder The option strategy holder address\\n     * @param amount The amount of options strategy contract\\n     * @param expiration The options strategy expiration time\\n     **/\\n    function lockLiquidityFor(\\n        address holder,\\n        uint128 amount,\\n        uint32 expiration\\n    ) external override onlyRole(STRATEGY_ROLE) returns (uint256 optionID) {\\n        totalLocked += amount;\\n        uint128 premium = uint128(_addTokens());\\n        lockedPremium += premium;\\n\\n        require(\\n            totalLocked + lockedPremium <=\\n                totalBalance + stakeandcoverPool.availableBalance(),\\n            \\\"The amount is too large\\\"\\n        );\\n        require(\\n            block.timestamp + maxLockupPeriod >= expiration,\\n            \\\"The period is too long\\\"\\n        );\\n        lockedByStrategy[msg.sender] += amount;\\n        optionID = manager.createOptionFor(holder);\\n        lockedLiquidity[optionID] = LockedLiquidity(\\n            LockedLiquidityState.Locked,\\n            msg.sender,\\n            amount,\\n            premium,\\n            expiration\\n        );\\n    }\\n\\n    /**\\n     * @notice Used for setting the initial\\n     * contract benchmark for calculating\\n     * future profits or losses\\n     * @param value The benchmark value\\n     **/\\n    function setBenchmark(uint256 value) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        benchmark = value;\\n    }\\n\\n    function _unlock(LockedLiquidity storage ll) internal {\\n        require(\\n            ll.state == LockedLiquidityState.Locked,\\n            \\\"The liquidity has already been unlocked\\\"\\n        );\\n        ll.state = LockedLiquidityState.Unlocked;\\n        totalLocked -= ll.amount;\\n        lockedPremium -= ll.premium;\\n        lockedByStrategy[ll.strategy] -= ll.amount;\\n    }\\n\\n    /**\\n     * @notice  Used for unlocking\\n     * liquidity after an expiration\\n     * @param lockedLiquidityID The option contract ID\\n     **/\\n    function unlock(uint256 lockedLiquidityID) external override {\\n        LockedLiquidity storage ll = lockedLiquidity[lockedLiquidityID];\\n        require(\\n            block.timestamp > ll.expiration,\\n            \\\"The expiration time has not yet come\\\"\\n        );\\n        _unlock(ll);\\n        emit Expired(lockedLiquidityID);\\n    }\\n\\n    /**\\n     * @notice Used for paying off the profits\\n     * if an option is exercised in-the-money\\n     * @param lockedLiquidityID The option contract ID\\n     * @param amount The amount to pay off\\n     * @param account The holder address\\n     **/\\n    function payOff(\\n        uint256 lockedLiquidityID,\\n        uint256 amount,\\n        address account\\n    ) external override nonReentrant {\\n        LockedLiquidity storage ll = lockedLiquidity[lockedLiquidityID];\\n\\n        require(\\n            ll.expiration > block.timestamp,\\n            \\\"The option has already expired\\\"\\n        );\\n        require(ll.strategy == msg.sender);\\n        require(account != address(0));\\n        require(amount != 0);\\n\\n        _unlock(ll);\\n\\n        if (totalBalance < amount) {\\n            _replenish(amount);\\n        }\\n\\n        _withdraw(account, amount);\\n\\n        emit Paid(lockedLiquidityID, account, amount);\\n    }\\n\\n    function _replenish(uint256 additionalAmount) internal {\\n        uint256 transferAmount =\\n            benchmark + additionalAmount + lockedPremium - totalBalance;\\n        stakeandcoverPool.payOut(transferAmount);\\n        totalBalance += transferAmount;\\n        emit Replenished(transferAmount);\\n    }\\n\\n    /**\\n     * @notice Used for adding deposited tokens\\n     * (e.g. premiums) to the contract's totalBalance\\n     * @param amount The amount of tokens to add\\n     **/\\n    function addTokens()\\n        public\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n        returns (uint256 amount)\\n    {\\n        return _addTokens();\\n    }\\n\\n    function _addTokens() private returns (uint256 amount) {\\n        amount = token.balanceOf(address(this)) - totalBalance;\\n        totalBalance += amount;\\n    }\\n\\n    function _withdraw(address to, uint256 amount) private {\\n        require(\\n            amount + totalLocked + lockedPremium <=\\n                totalBalance + stakeandcoverPool.availableBalance(),\\n            \\\"The amount to withdraw is too large\\\"\\n        );\\n        totalBalance -= amount;\\n        token.safeTransfer(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5d192e83a6189403f30e6ab8d045652a90d0fe166e0f4f316def053a356484cc\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool/IHegicOperationalTreasury.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../OptionsManager/IOptionsManager.sol\\\";\\n\\ninterface IHegicOperationalTreasury {\\n    enum LockedLiquidityState {Unlocked, Locked}\\n\\n    event Expired(uint256 indexed id);\\n    event Paid(uint256 indexed id, address indexed account, uint256 amount);\\n    event Replenished(uint256 amount);\\n\\n    struct LockedLiquidity {\\n        LockedLiquidityState state;\\n        address strategy;\\n        uint128 amount;\\n        uint128 premium;\\n        uint32 expiration;\\n    }\\n\\n    function manager() external view returns (IOptionsManager);\\n\\n    function token() external view returns (IERC20);\\n\\n    function lockLiquidityFor(\\n        address holder,\\n        uint128 amount,\\n        uint32 expiration\\n    ) external returns (uint256 optionID);\\n\\n    function payOff(\\n        uint256 lockedLiquidityID,\\n        uint256 amount,\\n        address account\\n    ) external;\\n\\n    function lockedByStrategy(address strategy)\\n        external\\n        view\\n        returns (uint256 lockedAmount);\\n\\n    function getStakeAndCoverBalance() external view returns (uint256 balance);\\n\\n    function totalBalance() external view returns (uint256 totalBalance);\\n\\n    function lockedPremium() external view returns (uint256 lockedPremium);\\n\\n    function benchmark() external view returns (uint256 benchmark);\\n\\n    function totalLocked() external view returns (uint256 totalLocked);\\n\\n    /**\\n     * @notice  Used for unlocking\\n     * liquidity after an expiration\\n     * @param lockedLiquidityID The option contract ID\\n     **/\\n    function unlock(uint256 lockedLiquidityID) external;\\n}\\n\",\"keccak256\":\"0xa09d31298b96864fe45d080d127d650d5fc1b19753bd5b5c8f7036cca9c83745\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool/IHegicStakeAndCover.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * Hegic\\n * Copyright (C) 2022 Hegic Protocol\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\nimport \\\"../OptionsManager/IOptionsManager.sol\\\";\\n\\ninterface IHegicStakeAndCover {\\n    event Provided(address indexed by, uint256 hAmount, uint256 tokenAmount);\\n    event Withdrawn(\\n        address indexed by,\\n        address indexed hegicDestination,\\n        uint256 hAmount,\\n        uint256 tokenAmount\\n    );\\n\\n    function availableBalance() external view returns (uint256);\\n\\n    function payOut(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x659ad06377a34d9aff7f6420657cc25110f1e7d2294c57e77d32626171999587\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b0d38038062001b0d83398101604081905262000034916200013e565b60018055620000456000336200008e565b606094851b6001600160601b03199081166080529390941b90921660a052600955600280546001600160a01b0319166001600160a01b03909216919091179055600555620001bf565b6200009a82826200009e565b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff166200009a576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620000fa3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600080600080600060a086880312156200015757600080fd5b85516200016481620001a6565b60208701519095506200017781620001a6565b6040870151606088015191955093506200019181620001a6565b80925050608086015190509295509295909350565b6001600160a01b0381168114620001bc57600080fd5b50565b60805160601c60a05160601c61190d62000200600039600081816102af0152610a330152600081816103f2015281816110170152611062015261190d6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c80638127f0a1116100de578063ad7a672f11610097578063d5f4f0b311610071578063d5f4f0b3146103bf578063d6a63677146103c7578063f3fef3a3146103da578063fc0c546a146103ed57600080fd5b8063ad7a672f1461039b578063d163af7b146103a4578063d547741f146103ac57600080fd5b80638127f0a1146103485780638903c5a21461035b57806391d14854146103645780639ec956d514610377578063a065ea5314610380578063a217fddf1461039357600080fd5b806346067d691161014b578063580b7c2e11610125578063580b7c2e146102f25780636198e3391461031957806368a2da511461032c578063797be55e1461033f57600080fd5b806346067d69146102a2578063481c6a75146102aa57806356891412146102e957600080fd5b806301ffc9a714610193578063248a9ca3146101bb5780632f2ff15d146101ec57806336568abe146102015780633755269b146102145780634485558314610282575b600080fd5b6101a66101a1366004611652565b610414565b60405190151581526020015b60405180910390f35b6101de6101c936600461160d565b60009081526020819052604090206001015490565b6040519081526020016101b2565b6101ff6101fa366004611626565b61044b565b005b6101ff61020f366004611626565b610476565b61027161022236600461160d565b60036020526000908152604090208054600182015460029092015460ff8216926101009092046001600160a01b0316916001600160801b0380821692600160801b909204169063ffffffff1685565b6040516101b295949392919061175b565b6101de610290366004611548565b60046020526000908152604090205481565b6101de6104f9565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b6101de60075481565b6101de7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b6101ff61032736600461160d565b61057b565b6101ff61033a36600461160d565b610626565b6101de60065481565b6101ff610356366004611695565b610638565b6101de60055481565b6101a6610372366004611626565b6107a6565b6101de60095481565b6002546102d1906001600160a01b031681565b6101de600081565b6101de60085481565b6101ff6107cf565b6101ff6103ba366004611626565b6107e8565b6101de61080e565b6101de6103d5366004611563565b610829565b6101ff6103e83660046115c1565b610b97565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061044557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104678133610bad565b6104718383610c11565b505050565b6001600160a01b03811633146104eb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104f58282610c95565b5050565b6002546040805163ab2f0e5160e01b815290516000926001600160a01b03169163ab2f0e51916004808301926020929190829003018186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610576919061167c565b905090565b6000818152600360205260409020600281015463ffffffff1642116105ee5760405162461bcd60e51b8152602060048201526024808201527f5468652065787069726174696f6e2074696d6520686173206e6f742079657420604482015263636f6d6560e01b60648201526084016104e2565b6105f781610cfa565b60405182907ff80dbaea4785589e52984ca36a31de106adc77759539a5c7d92883bf49692fe990600090a25050565b60006106328133610bad565b50600555565b6002600154141561068b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e2565b600260018190556000848152600360205260409020908101544263ffffffff909116116106fa5760405162461bcd60e51b815260206004820152601e60248201527f546865206f7074696f6e2068617320616c72656164792065787069726564000060448201526064016104e2565b805461010090046001600160a01b0316331461071557600080fd5b6001600160a01b03821661072857600080fd5b8261073257600080fd5b61073b81610cfa565b82600854101561074e5761074e83610e14565b6107588284610eeb565b816001600160a01b0316847f4f2d18324ee95128de091ed2adc501295479000ce4c2cec607aeb1b67e189e2f8560405161079491815260200190565b60405180910390a35050600180555050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107db8133610bad565b6107e56000610e14565b50565b6000828152602081905260409020600101546108048133610bad565b6104718383610c95565b60008061081b8133610bad565b61082361103e565b91505090565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6108568133610bad565b836001600160801b03166007600082825461087191906117ea565b909155506000905061088161103e565b9050806001600160801b03166006600082825461089e91906117ea565b90915550506002546040805163ab2f0e5160e01b815290516001600160a01b039092169163ab2f0e5191600480820192602092909190829003018186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610920919061167c565b60085461092d91906117ea565b60065460075461093d91906117ea565b111561098b5760405162461bcd60e51b815260206004820152601760248201527f54686520616d6f756e7420697320746f6f206c6172676500000000000000000060448201526064016104e2565b8363ffffffff16600954426109a091906117ea565b10156109e75760405162461bcd60e51b815260206004820152601660248201527554686520706572696f6420697320746f6f206c6f6e6760501b60448201526064016104e2565b33600090815260046020526040812080546001600160801b0388169290610a0f9084906117ea565b909155505060405163012c0d8160e71b81526001600160a01b0387811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639606c08090602401602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf919061167c565b6040805160a0810182526001808252336020808401919091526001600160801b038a8116848601528616606084015263ffffffff8916608084015260008581526003909152929092208151815494975091939092839160ff1916908381811115610b1b57610b1b611895565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b0319909116178155604082015160608301516001600160801b03908116600160801b0291161760018201556080909101516002909101805463ffffffff90921663ffffffff199092169190911790555090949350505050565b6000610ba38133610bad565b6104718383610eeb565b610bb782826107a6565b6104f557610bcf816001600160a01b03166014611104565b610bda836020611104565b604051602001610beb9291906116e6565b60408051601f198184030181529082905262461bcd60e51b82526104e2916004016117b7565b610c1b82826107a6565b6104f5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c9f82826107a6565b156104f5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001815460ff166001811115610d1257610d12611895565b14610d6f5760405162461bcd60e51b815260206004820152602760248201527f546865206c69717569646974792068617320616c7265616479206265656e20756044820152661b9b1bd8dad95960ca1b60648201526084016104e2565b805460ff191681556001810154600780546001600160801b0390921691600090610d9a908490611821565b9091555050600181015460068054600160801b9092046001600160801b031691600090610dc8908490611821565b90915550506001810154815461010090046001600160a01b0316600090815260046020526040812080546001600160801b0390931692909190610e0c908490611821565b909155505050565b600060085460065483600554610e2a91906117ea565b610e3491906117ea565b610e3e9190611821565b600254604051636d199e5360e11b8152600481018390529192506001600160a01b03169063da333ca690602401600060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050508060086000828254610eaf91906117ea565b90915550506040518181527fc38f9a7f7e6a60286c03e404e4a1890a1434a5633900261bf999356064b031da9060200160405180910390a15050565b600260009054906101000a90046001600160a01b03166001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f71919061167c565b600854610f7e91906117ea565b600654600754610f8e90846117ea565b610f9891906117ea565b1115610ff25760405162461bcd60e51b815260206004820152602360248201527f54686520616d6f756e7420746f20776974686472617720697320746f6f206c6160448201526272676560e81b60648201526084016104e2565b80600860008282546110049190611821565b909155506104f590506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836112a7565b6008546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061167c565b6110e69190611821565b905080600860008282546110fa91906117ea565b9250508190555090565b60606000611113836002611802565b61111e9060026117ea565b67ffffffffffffffff811115611136576111366118c1565b6040519080825280601f01601f191660200182016040528015611160576020820181803683370190505b509050600360fc1b8160008151811061117b5761117b6118ab565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111aa576111aa6118ab565b60200101906001600160f81b031916908160001a90535060006111ce846002611802565b6111d99060016117ea565b90505b6001811115611251576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061120d5761120d6118ab565b1a60f81b828281518110611223576112236118ab565b60200101906001600160f81b031916908160001a90535060049490941c9361124a81611868565b90506111dc565b5083156112a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104e2565b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610471928692916000916113379185169084906113b4565b805190915015610471578080602001905181019061135591906115eb565b6104715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e2565b60606113c384846000856113cb565b949350505050565b60608247101561142c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e2565b843b61147a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e2565b600080866001600160a01b0316858760405161149691906116ca565b60006040518083038185875af1925050503d80600081146114d3576040519150601f19603f3d011682016040523d82523d6000602084013e6114d8565b606091505b50915091506114e88282866114f3565b979650505050505050565b606083156115025750816112a0565b8251156115125782518084602001fd5b8160405162461bcd60e51b81526004016104e291906117b7565b80356001600160a01b038116811461154357600080fd5b919050565b60006020828403121561155a57600080fd5b6112a08261152c565b60008060006060848603121561157857600080fd5b6115818461152c565b925060208401356001600160801b038116811461159d57600080fd5b9150604084013563ffffffff811681146115b657600080fd5b809150509250925092565b600080604083850312156115d457600080fd5b6115dd8361152c565b946020939093013593505050565b6000602082840312156115fd57600080fd5b815180151581146112a057600080fd5b60006020828403121561161f57600080fd5b5035919050565b6000806040838503121561163957600080fd5b823591506116496020840161152c565b90509250929050565b60006020828403121561166457600080fd5b81356001600160e01b0319811681146112a057600080fd5b60006020828403121561168e57600080fd5b5051919050565b6000806000606084860312156116aa57600080fd5b83359250602084013591506116c16040850161152c565b90509250925092565b600082516116dc818460208701611838565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161171e816017850160208801611838565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161174f816028840160208801611838565b01602801949350505050565b60a081016002871061177d57634e487b7160e01b600052602160045260246000fd5b9581526001600160a01b039490941660208501526001600160801b0392831660408501529116606083015263ffffffff1660809091015290565b60208152600082518060208401526117d6816040850160208701611838565b601f01601f19169190910160400192915050565b600082198211156117fd576117fd61187f565b500190565b600081600019048311821515161561181c5761181c61187f565b500290565b6000828210156118335761183361187f565b500390565b60005b8381101561185357818101518382015260200161183b565b83811115611862576000848401525b50505050565b6000816118775761187761187f565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122031bfdbba2500eea22f290cc4e9a48afef863b66cb11f0d9fa7053da9518f4f9564736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c80638127f0a1116100de578063ad7a672f11610097578063d5f4f0b311610071578063d5f4f0b3146103bf578063d6a63677146103c7578063f3fef3a3146103da578063fc0c546a146103ed57600080fd5b8063ad7a672f1461039b578063d163af7b146103a4578063d547741f146103ac57600080fd5b80638127f0a1146103485780638903c5a21461035b57806391d14854146103645780639ec956d514610377578063a065ea5314610380578063a217fddf1461039357600080fd5b806346067d691161014b578063580b7c2e11610125578063580b7c2e146102f25780636198e3391461031957806368a2da511461032c578063797be55e1461033f57600080fd5b806346067d69146102a2578063481c6a75146102aa57806356891412146102e957600080fd5b806301ffc9a714610193578063248a9ca3146101bb5780632f2ff15d146101ec57806336568abe146102015780633755269b146102145780634485558314610282575b600080fd5b6101a66101a1366004611652565b610414565b60405190151581526020015b60405180910390f35b6101de6101c936600461160d565b60009081526020819052604090206001015490565b6040519081526020016101b2565b6101ff6101fa366004611626565b61044b565b005b6101ff61020f366004611626565b610476565b61027161022236600461160d565b60036020526000908152604090208054600182015460029092015460ff8216926101009092046001600160a01b0316916001600160801b0380821692600160801b909204169063ffffffff1685565b6040516101b295949392919061175b565b6101de610290366004611548565b60046020526000908152604090205481565b6101de6104f9565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101b2565b6101de60075481565b6101de7f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c81565b6101ff61032736600461160d565b61057b565b6101ff61033a36600461160d565b610626565b6101de60065481565b6101ff610356366004611695565b610638565b6101de60055481565b6101a6610372366004611626565b6107a6565b6101de60095481565b6002546102d1906001600160a01b031681565b6101de600081565b6101de60085481565b6101ff6107cf565b6101ff6103ba366004611626565b6107e8565b6101de61080e565b6101de6103d5366004611563565b610829565b6101ff6103e83660046115c1565b610b97565b6102d17f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b03198216637965db0b60e01b148061044557506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000828152602081905260409020600101546104678133610bad565b6104718383610c11565b505050565b6001600160a01b03811633146104eb5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b60648201526084015b60405180910390fd5b6104f58282610c95565b5050565b6002546040805163ab2f0e5160e01b815290516000926001600160a01b03169163ab2f0e51916004808301926020929190829003018186803b15801561053e57600080fd5b505afa158015610552573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610576919061167c565b905090565b6000818152600360205260409020600281015463ffffffff1642116105ee5760405162461bcd60e51b8152602060048201526024808201527f5468652065787069726174696f6e2074696d6520686173206e6f742079657420604482015263636f6d6560e01b60648201526084016104e2565b6105f781610cfa565b60405182907ff80dbaea4785589e52984ca36a31de106adc77759539a5c7d92883bf49692fe990600090a25050565b60006106328133610bad565b50600555565b6002600154141561068b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104e2565b600260018190556000848152600360205260409020908101544263ffffffff909116116106fa5760405162461bcd60e51b815260206004820152601e60248201527f546865206f7074696f6e2068617320616c72656164792065787069726564000060448201526064016104e2565b805461010090046001600160a01b0316331461071557600080fd5b6001600160a01b03821661072857600080fd5b8261073257600080fd5b61073b81610cfa565b82600854101561074e5761074e83610e14565b6107588284610eeb565b816001600160a01b0316847f4f2d18324ee95128de091ed2adc501295479000ce4c2cec607aeb1b67e189e2f8560405161079491815260200190565b60405180910390a35050600180555050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006107db8133610bad565b6107e56000610e14565b50565b6000828152602081905260409020600101546108048133610bad565b6104718383610c95565b60008061081b8133610bad565b61082361103e565b91505090565b60007f928286c473ded01ff8bf61a1986f14a0579066072fa8261442d9fea514d93a4c6108568133610bad565b836001600160801b03166007600082825461087191906117ea565b909155506000905061088161103e565b9050806001600160801b03166006600082825461089e91906117ea565b90915550506002546040805163ab2f0e5160e01b815290516001600160a01b039092169163ab2f0e5191600480820192602092909190829003018186803b1580156108e857600080fd5b505afa1580156108fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610920919061167c565b60085461092d91906117ea565b60065460075461093d91906117ea565b111561098b5760405162461bcd60e51b815260206004820152601760248201527f54686520616d6f756e7420697320746f6f206c6172676500000000000000000060448201526064016104e2565b8363ffffffff16600954426109a091906117ea565b10156109e75760405162461bcd60e51b815260206004820152601660248201527554686520706572696f6420697320746f6f206c6f6e6760501b60448201526064016104e2565b33600090815260046020526040812080546001600160801b0388169290610a0f9084906117ea565b909155505060405163012c0d8160e71b81526001600160a01b0387811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639606c08090602401602060405180830381600087803b158015610a7757600080fd5b505af1158015610a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaf919061167c565b6040805160a0810182526001808252336020808401919091526001600160801b038a8116848601528616606084015263ffffffff8916608084015260008581526003909152929092208151815494975091939092839160ff1916908381811115610b1b57610b1b611895565b0217905550602082015181546001600160a01b0390911661010002610100600160a81b0319909116178155604082015160608301516001600160801b03908116600160801b0291161760018201556080909101516002909101805463ffffffff90921663ffffffff199092169190911790555090949350505050565b6000610ba38133610bad565b6104718383610eeb565b610bb782826107a6565b6104f557610bcf816001600160a01b03166014611104565b610bda836020611104565b604051602001610beb9291906116e6565b60408051601f198184030181529082905262461bcd60e51b82526104e2916004016117b7565b610c1b82826107a6565b6104f5576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610c513390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610c9f82826107a6565b156104f5576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6001815460ff166001811115610d1257610d12611895565b14610d6f5760405162461bcd60e51b815260206004820152602760248201527f546865206c69717569646974792068617320616c7265616479206265656e20756044820152661b9b1bd8dad95960ca1b60648201526084016104e2565b805460ff191681556001810154600780546001600160801b0390921691600090610d9a908490611821565b9091555050600181015460068054600160801b9092046001600160801b031691600090610dc8908490611821565b90915550506001810154815461010090046001600160a01b0316600090815260046020526040812080546001600160801b0390931692909190610e0c908490611821565b909155505050565b600060085460065483600554610e2a91906117ea565b610e3491906117ea565b610e3e9190611821565b600254604051636d199e5360e11b8152600481018390529192506001600160a01b03169063da333ca690602401600060405180830381600087803b158015610e8557600080fd5b505af1158015610e99573d6000803e3d6000fd5b505050508060086000828254610eaf91906117ea565b90915550506040518181527fc38f9a7f7e6a60286c03e404e4a1890a1434a5633900261bf999356064b031da9060200160405180910390a15050565b600260009054906101000a90046001600160a01b03166001600160a01b031663ab2f0e516040518163ffffffff1660e01b815260040160206040518083038186803b158015610f3957600080fd5b505afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f71919061167c565b600854610f7e91906117ea565b600654600754610f8e90846117ea565b610f9891906117ea565b1115610ff25760405162461bcd60e51b815260206004820152602360248201527f54686520616d6f756e7420746f20776974686472617720697320746f6f206c6160448201526272676560e81b60648201526084016104e2565b80600860008282546110049190611821565b909155506104f590506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001683836112a7565b6008546040516370a0823160e01b8152306004820152600091906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a082319060240160206040518083038186803b1580156110a457600080fd5b505afa1580156110b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110dc919061167c565b6110e69190611821565b905080600860008282546110fa91906117ea565b9250508190555090565b60606000611113836002611802565b61111e9060026117ea565b67ffffffffffffffff811115611136576111366118c1565b6040519080825280601f01601f191660200182016040528015611160576020820181803683370190505b509050600360fc1b8160008151811061117b5761117b6118ab565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106111aa576111aa6118ab565b60200101906001600160f81b031916908160001a90535060006111ce846002611802565b6111d99060016117ea565b90505b6001811115611251576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061120d5761120d6118ab565b1a60f81b828281518110611223576112236118ab565b60200101906001600160f81b031916908160001a90535060049490941c9361124a81611868565b90506111dc565b5083156112a05760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016104e2565b9392505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092018352602080830180516001600160e01b031663a9059cbb60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656490840152610471928692916000916113379185169084906113b4565b805190915015610471578080602001905181019061135591906115eb565b6104715760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016104e2565b60606113c384846000856113cb565b949350505050565b60608247101561142c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104e2565b843b61147a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104e2565b600080866001600160a01b0316858760405161149691906116ca565b60006040518083038185875af1925050503d80600081146114d3576040519150601f19603f3d011682016040523d82523d6000602084013e6114d8565b606091505b50915091506114e88282866114f3565b979650505050505050565b606083156115025750816112a0565b8251156115125782518084602001fd5b8160405162461bcd60e51b81526004016104e291906117b7565b80356001600160a01b038116811461154357600080fd5b919050565b60006020828403121561155a57600080fd5b6112a08261152c565b60008060006060848603121561157857600080fd5b6115818461152c565b925060208401356001600160801b038116811461159d57600080fd5b9150604084013563ffffffff811681146115b657600080fd5b809150509250925092565b600080604083850312156115d457600080fd5b6115dd8361152c565b946020939093013593505050565b6000602082840312156115fd57600080fd5b815180151581146112a057600080fd5b60006020828403121561161f57600080fd5b5035919050565b6000806040838503121561163957600080fd5b823591506116496020840161152c565b90509250929050565b60006020828403121561166457600080fd5b81356001600160e01b0319811681146112a057600080fd5b60006020828403121561168e57600080fd5b5051919050565b6000806000606084860312156116aa57600080fd5b83359250602084013591506116c16040850161152c565b90509250925092565b600082516116dc818460208701611838565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161171e816017850160208801611838565b7001034b99036b4b9b9b4b733903937b6329607d1b601791840191820152835161174f816028840160208801611838565b01602801949350505050565b60a081016002871061177d57634e487b7160e01b600052602160045260246000fd5b9581526001600160a01b039490941660208501526001600160801b0392831660408501529116606083015263ffffffff1660809091015290565b60208152600082518060208401526117d6816040850160208701611838565b601f01601f19169190910160400192915050565b600082198211156117fd576117fd61187f565b500190565b600081600019048311821515161561181c5761181c61187f565b500290565b6000828210156118335761183361187f565b500390565b60005b8381101561185357818101518382015260200161183b565b83811115611862576000848401525b50505050565b6000816118775761187761187f565b506000190190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122031bfdbba2500eea22f290cc4e9a48afef863b66cb11f0d9fa7053da9518f4f9564736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addTokens()": {
        "params": {
          "amount": "The amount of tokens to add*"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "lockLiquidityFor(address,uint128,uint32)": {
        "params": {
          "amount": "The amount of options strategy contract",
          "expiration": "The options strategy expiration time*",
          "holder": "The option strategy holder address"
        }
      },
      "payOff(uint256,uint256,address)": {
        "params": {
          "account": "The holder address*",
          "amount": "The amount to pay off",
          "lockedLiquidityID": "The option contract ID"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "setBenchmark(uint256)": {
        "params": {
          "value": "The benchmark value*"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "unlock(uint256)": {
        "params": {
          "lockedLiquidityID": "The option contract ID*"
        }
      },
      "withdraw(address,uint256)": {
        "params": {
          "amount": "The amount to withdraw*",
          "to": "The recipient address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addTokens()": {
        "notice": "Used for adding deposited tokens (e.g. premiums) to the contract's totalBalance"
      },
      "lockLiquidityFor(address,uint128,uint32)": {
        "notice": "Used for locking liquidity in an active options strategy"
      },
      "payOff(uint256,uint256,address)": {
        "notice": "Used for paying off the profits if an option is exercised in-the-money"
      },
      "replenish()": {
        "notice": "replenishUsed for replenishing of the Hegic Operational Treasury contract*"
      },
      "setBenchmark(uint256)": {
        "notice": "Used for setting the initial contract benchmark for calculating future profits or losses"
      },
      "unlock(uint256)": {
        "notice": "Used for unlocking liquidity after an expiration"
      },
      "withdraw(address,uint256)": {
        "notice": "Used for withdrawing deposited tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 108,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)103_storage)"
      },
      {
        "astId": 810,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 8903,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "stakeandcoverPool",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IHegicStakeAndCover)12479"
      },
      {
        "astId": 8913,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "lockedLiquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(LockedLiquidity)12376_storage)"
      },
      {
        "astId": 8918,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "lockedByStrategy",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8921,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "benchmark",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8924,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "lockedPremium",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 8927,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "totalLocked",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 8930,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "totalBalance",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 8932,
        "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
        "label": "maxLockupPeriod",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IHegicStakeAndCover)12479": {
        "encoding": "inplace",
        "label": "contract IHegicStakeAndCover",
        "numberOfBytes": "20"
      },
      "t_enum(LockedLiquidityState)12348": {
        "encoding": "inplace",
        "label": "enum IHegicOperationalTreasury.LockedLiquidityState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)103_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)103_storage"
      },
      "t_mapping(t_uint256,t_struct(LockedLiquidity)12376_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IHegicOperationalTreasury.LockedLiquidity)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedLiquidity)12376_storage"
      },
      "t_struct(LockedLiquidity)12376_storage": {
        "encoding": "inplace",
        "label": "struct IHegicOperationalTreasury.LockedLiquidity",
        "members": [
          {
            "astId": 12367,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "state",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(LockedLiquidityState)12348"
          },
          {
            "astId": 12369,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "strategy",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 12371,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12373,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "premium",
            "offset": 16,
            "slot": "1",
            "type": "t_uint128"
          },
          {
            "astId": 12375,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "expiration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(RoleData)103_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 100,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 102,
            "contract": "contracts/Pool/HegicOperationalTreasury.sol:HegicOperationalTreasury",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}