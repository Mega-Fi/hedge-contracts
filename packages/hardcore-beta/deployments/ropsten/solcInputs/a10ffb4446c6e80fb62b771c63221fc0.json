{
  "language": "Solidity",
  "sources": {
    "contracts/BondingCurve/buysell.sol": {
      "content": "pragma solidity 0.8.6;\n\nimport \"./IBondingCurve.sol\";\n\ncontract BuySell {\n    constructor(\n        IErc20BondingCurve _usdc20BondingCurve,\n        IETHBondingCurve _ethBondingCurve\n    ) {\n        usdc20BondingCurve = _usdc20BondingCurve;\n        ethBondingCurve = _ethBondingCurve;\n    }\n\n    IErc20BondingCurve usdc20BondingCurve;\n    IETHBondingCurve ethBondingCurve;\n\n    function buysellInOneTxnETH(uint256 tokenAmount) public payable {\n        ethBondingCurve.buy{value: msg.value}(tokenAmount);\n        ethBondingCurve.sell(tokenAmount);\n    }\n\n    function buysellInOneTxnUSDC(uint256 tokenAmount) public {\n        usdc20BondingCurve.buy(tokenAmount);\n        usdc20BondingCurve.sell(tokenAmount);\n    }\n}\n"
    },
    "contracts/BondingCurve/IBondingCurve.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IETHBondingCurve {\n    function buy(uint256 tokenAmount) external payable;\n\n    function sell(uint256 tokenAmount) external;\n}\n\ninterface IErc20BondingCurve {\n    function buy(uint256 tokenAmount) external;\n\n    function sell(uint256 tokenAmount) external;\n}\n"
    },
    "contracts/BondingCurve/ETHBondingCurve.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Linear.sol\";\nimport \"./IBondingCurve.sol\";\n\ncontract ETHBondingCurve is LinearBondingCurve, IETHBondingCurve {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable token;\n    uint256 public soldAmount;\n    uint256 public comissionShare = 20;\n    address payable public hegicDevelopmentFund;\n\n    event Bought(address indexed account, uint256 amount, uint256 ethAmount);\n    event Sold(\n        address indexed account,\n        uint256 amount,\n        uint256 ethAmount,\n        uint256 comission\n    );\n\n    constructor(\n        IERC20 _token,\n        uint256 k,\n        uint256 startPrice\n    ) LinearBondingCurve(k, startPrice) {\n        token = _token;\n        hegicDevelopmentFund = payable(msg.sender);\n        _setupRole(LBC_ADMIN_ROLE, msg.sender);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function buy(uint256 tokenAmount) external payable override {\n        uint256 nextSold = soldAmount + tokenAmount;\n        uint256 ethAmount = s(soldAmount, nextSold);\n        soldAmount = nextSold;\n        require(msg.value >= ethAmount, \"Value is too small\");\n        token.safeTransfer(msg.sender, tokenAmount);\n        if (msg.value > ethAmount)\n            payable(msg.sender).transfer(msg.value - ethAmount);\n        emit Bought(msg.sender, tokenAmount, ethAmount);\n    }\n\n    function sell(uint256 tokenAmount) external override {\n        uint256 nextSold = soldAmount - tokenAmount;\n        uint256 ethAmount = s(nextSold, soldAmount);\n        uint256 comission = (ethAmount * comissionShare) / 100;\n        uint256 refund = ethAmount - comission;\n        require(comission > 0, \"Amount is too small\");\n\n        soldAmount = nextSold;\n        token.safeTransferFrom(msg.sender, address(this), tokenAmount);\n        hegicDevelopmentFund.transfer(comission);\n        payable(msg.sender).transfer(refund);\n        emit Sold(msg.sender, tokenAmount, refund, comission);\n    }\n\n    function setHDF(address payable value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        hegicDevelopmentFund = value;\n    }\n\n    function setCommissionShare(uint256 value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        comissionShare = value;\n    }\n\n    function destruct() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        selfdestruct(hegicDevelopmentFund);\n    }\n\n    function withdawERC20(IERC20 token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        token.transfer(hegicDevelopmentFund, token.balanceOf(address(this)));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/BondingCurve/Linear.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2020 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\ncontract LinearBondingCurve is AccessControl {\n    uint256 public K; // Inf\n    uint256 public START_PRICE; // 0.000018e8\n    bytes32 public constant LBC_ADMIN_ROLE = keccak256(\"LBC_ADMIN_ROLE\");\n\n    constructor(uint256 k, uint256 startPrice) public {\n        K = k;\n        START_PRICE = startPrice;\n    }\n\n    function s(uint256 x0, uint256 x1) public view returns (uint256) {\n        require(x1 > x0, \"Hegic Amount need higher then 0\");\n        return\n            (((x1 + x0) * (x1 - x0)) / 2 / K + START_PRICE * (x1 - x0)) / 1e18;\n    }\n\n    function setParams(uint256 _K, uint256 _START_PRICE)\n        external\n        onlyRole(LBC_ADMIN_ROLE)\n    {\n        K = _K;\n        START_PRICE = _START_PRICE;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/PriceCalculators/PriceController.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"./ScaledPolynomialPriceCalculator.sol\";\nimport \"./PolynomialPriceCalculator.sol\";\n\ncontract PriceController is AccessControl {\n    bytes32 public constant PRICE_CORRECTOR_ROLE =\n        keccak256(\"PRICE_CORRECTOR_ROLE\");\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function setDiscont(\n        ScaledPolynomialPriceCalculator calculator,\n        int256[5] calldata values\n    ) external onlyRole(PRICE_CORRECTOR_ROLE) {\n        calculator.setDiscont(values);\n    }\n\n    function setCoefficients(\n        PolynomialPriceCalculator calculator,\n        int256[5] calldata values\n    ) external onlyRole(PRICE_CORRECTOR_ROLE) {\n        calculator.setCoefficients(values);\n    }\n\n    function transferOwnership(Ownable calculator)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        calculator.transferOwnership(msg.sender);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/PriceCalculators/ScaledPolynomialPriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../utils/Math.sol\";\nimport \"./ScaledStrikePriceCalculator.sol\";\n\ncontract ScaledPolynomialPriceCalculator is ScaledStrikePriceCalculator {\n    using HegicMath for uint256;\n\n    int256[5] public discont;\n    IPremiumCalculator public basePricer;\n    uint256 internal immutable discontDecimals = 1e30;\n\n    event SetDiscont(int256[5] values);\n\n    constructor(\n        uint256 _priceCorrectionRate,\n        uint8 _roundedDecimals,\n        IPremiumCalculator _basePricer,\n        int256[5] memory initialDiscont\n    )\n        ScaledStrikePriceCalculator(\n            _basePricer.priceProvider(),\n            _priceCorrectionRate,\n            _roundedDecimals\n        )\n    {\n        discont = initialDiscont;\n        basePricer = _basePricer;\n    }\n\n    /**\n     * @notice Used for adjusting the options prices (the premiums)\n     * @param values [i] New setDiscont value\n     **/\n    function setDiscont(int256[5] calldata values) external onlyOwner {\n        discont = values;\n        emit SetDiscont(values);\n    }\n\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view virtual override returns (uint256 discontPremium) {\n        uint256 premium = basePricer.calculatePremium(period, amount, strike);\n        uint256 calculatedDiscont =\n            uint256(\n                discont[0] +\n                    discont[1] *\n                    int256(period) +\n                    discont[2] *\n                    int256(period)**2 +\n                    discont[3] *\n                    int256(period)**3 +\n                    discont[4] *\n                    int256(period)**4\n            );\n        return (premium * calculatedDiscont) / discontDecimals;\n    }\n}\n"
    },
    "contracts/PriceCalculators/PolynomialPriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./BasePriceCalculator.sol\";\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../utils/Math.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Price Calculator Contract\n * @notice The contract that calculates the options prices (the premiums)\n * that are adjusted through the `ImpliedVolRate` parameter.\n **/\n\ncontract PolynomialPriceCalculator is BasePriceCalculator {\n    using HegicMath for uint256;\n\n    int256[5] public coefficients;\n    uint256 internal immutable tokenDecimals;\n\n    event SetCoefficients(int256[5] values);\n\n    constructor(\n        int256[5] memory initialCoefficients,\n        AggregatorV3Interface _priceProvider,\n        uint256 _tokenDecimals\n    ) BasePriceCalculator(_priceProvider) {\n        coefficients = initialCoefficients;\n        tokenDecimals = _tokenDecimals;\n    }\n\n    /**\n     * @notice Used for adjusting the options prices (the premiums)\n     * @param values [i] New setCoefficients value\n     **/\n    function setCoefficients(int256[5] calldata values) external onlyOwner {\n        coefficients = values;\n        emit SetCoefficients(values);\n    }\n\n    /**\n     * @notice Calculates and prices in the time value of the option\n     * @param amount Option size\n     * @param period The option period in seconds (1 days <= period <= 90 days)\n     * @return fee The premium size to be paid\n     **/\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 /*strike*/\n    ) internal view virtual override returns (uint256 fee) {\n        uint256 premium =\n            uint256(\n                coefficients[0] +\n                    coefficients[1] *\n                    int256(period) +\n                    coefficients[2] *\n                    int256(period)**2 +\n                    coefficients[3] *\n                    int256(period)**3 +\n                    coefficients[4] *\n                    int256(period)**4\n            );\n        return ((premium / 1e24) * amount) / 10**tokenDecimals;\n    }\n}\n"
    },
    "contracts/Interfaces/Interfaces.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\n\n// /**\n//  * @author 0mllwntrmt3\n//  * @title Hegic Protocol V8888 Interface\n//  * @notice The interface for the price calculator,\n//  *   options, pools and staking contracts.\n//  **/\n\n/**\n * @notice The interface fot the contract that calculates\n *   the options prices (the premiums) that are adjusted\n *   through balancing the `ImpliedVolRate` parameter.\n **/\n\ninterface IIVLPriceCalculator {\n    event SetImpliedVolRate(uint256 value);\n    event SetSettlementFeeShare(uint256 value);\n}\n\ninterface IPriceCalculator is IIVLPriceCalculator {\n    /**\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 settlementFee, uint256 premium);\n}\n\ninterface IAtmPremiumCalculator {\n    event SetPolinomCall(int256[5] values);\n    event SetPolinomPut(int256[5] values);\n\n    /**\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function calculateAtmCallPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 premium);\n\n    function calculateAtmPutPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 premium);\n}\n\ninterface IPremiumCalculator is IIVLPriceCalculator {\n    event SetBorders(uint256[3] values);\n    event SetImpliedVolRates(uint256[4] values);\n    event SetDiscontCall(int256[5] values);\n    event SetDiscontPut(int256[5] values);\n    event SetDiscontSpread(uint8 values);\n    event SetStrikePercentage(uint256 value);\n    event SetPeriodLimits(uint256 min, uint256 max);\n\n    /**\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function calculatePremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 premium);\n\n    function priceProvider() external view returns (AggregatorV3Interface);\n}\n\n/**\n * @notice The interface for the contract that manages pools and the options parameters,\n *   accumulates the funds from the liquidity providers and makes the withdrawals for them,\n *   sells the options contracts to the options buyers and collateralizes them,\n *   exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\n *   unlocks the expired options and distributes the premiums among the liquidity providers.\n **/\ninterface IHegicPool is IERC721, IPriceCalculator {\n    enum OptionState {Invalid, Active, Exercised, Expired}\n    enum TrancheState {Invalid, Open, Closed}\n\n    function priceProvider() external view returns (AggregatorV3Interface);\n\n    /**\n     * @param state The state of the option: Invalid, Active, Exercised, Expired\n     * @param strike The option strike\n     * @param amount The option size\n     * @param lockedAmount The option collateral size locked\n     * @param expired The option expiration timestamp\n     * @param hedgePremium The share of the premium paid for hedging from the losses\n     * @param unhedgePremium The share of the premium paid to the hedged liquidity provider\n     **/\n    struct Option {\n        OptionState state;\n        uint256 strike;\n        uint256 amount;\n        uint256 lockedAmount;\n        uint256 expired;\n        uint256 hedgePremium;\n        uint256 unhedgePremium;\n    }\n\n    /**\n     * @param state The state of the liquidity tranche: Invalid, Open, Closed\n     * @param share The liquidity provider's share in the pool\n     * @param amount The size of liquidity provided\n     * @param creationTimestamp The liquidity deposit timestamp\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\n     **/\n    struct Tranche {\n        TrancheState state;\n        uint256 share;\n        uint256 amount;\n        uint256 creationTimestamp;\n        bool hedged;\n    }\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     * @param settlementFee The part of the premium that\n     *   is distributed among the HEGIC staking participants\n     * @param premium The part of the premium that\n     *   is distributed among the liquidity providers\n     **/\n    event Acquired(uint256 indexed id, uint256 settlementFee, uint256 premium);\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     * @param profit The profits of the option if exercised\n     **/\n    event Exercised(uint256 indexed id, uint256 profit);\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    event Expired(uint256 indexed id);\n\n    /**\n     * @param account The liquidity provider's address\n     * @param trancheID The liquidity tranche ID\n     **/\n    event Withdrawn(\n        address indexed account,\n        uint256 indexed trancheID,\n        uint256 amount\n    );\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    function unlock(uint256 id) external;\n\n    /**\n     * @param id The ERC721 token ID linked to the option\n     **/\n    function exercise(uint256 id) external;\n\n    function setLockupPeriod(uint256, uint256) external;\n\n    function collateralizationRatio() external view returns (uint256);\n\n    /**\n     * @param value The hedging pool address\n     **/\n    function setHedgePool(address value) external;\n\n    /**\n     * @param trancheID The liquidity tranche ID\n     * @return amount The liquidity to be received with\n     *   the positive or negative P&L earned or lost during\n     *   the period of holding the liquidity tranche considered\n     **/\n    function withdraw(uint256 trancheID) external returns (uint256 amount);\n\n    function pricer() external view returns (IPriceCalculator);\n\n    /**\n     * @return amount The unhedged liquidity size\n     *   (unprotected from the losses on selling the options)\n     **/\n    function unhedgedBalance() external view returns (uint256 amount);\n\n    /**\n     * @return amount The hedged liquidity size\n     * (protected from the losses on selling the options)\n     **/\n    function hedgedBalance() external view returns (uint256 amount);\n\n    /**\n     * @param account The liquidity provider's address\n     * @param amount The size of the liquidity tranche\n     * @param hedged The type of the liquidity tranche\n     * @param minShare The minimum share in the pool of the user\n     **/\n    function provideFrom(\n        address account,\n        uint256 amount,\n        bool hedged,\n        uint256 minShare\n    ) external returns (uint256 share);\n\n    /**\n     * @param holder The option buyer address\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function sellOption(\n        address holder,\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external returns (uint256 id);\n\n    /**\n     * @param trancheID The liquidity tranche ID\n     * @return amount The amount to be received after the withdrawal\n     **/\n    function withdrawWithoutHedge(uint256 trancheID)\n        external\n        returns (uint256 amount);\n\n    /**\n     * @return amount The total liquidity provided into the pool\n     **/\n    function totalBalance() external view returns (uint256 amount);\n\n    /**\n     * @return amount The total liquidity locked in the pool\n     **/\n    function lockedAmount() external view returns (uint256 amount);\n\n    function token() external view returns (IERC20);\n\n    /**\n     * @return state The state of the option: Invalid, Active, Exercised, Expired\n     * @return strike The option strike\n     * @return amount The option size\n     * @return lockedAmount The option collateral size locked\n     * @return expired The option expiration timestamp\n     * @return hedgePremium The share of the premium paid for hedging from the losses\n     * @return unhedgePremium The share of the premium paid to the hedged liquidity provider\n     **/\n    function options(uint256 id)\n        external\n        view\n        returns (\n            OptionState state,\n            uint256 strike,\n            uint256 amount,\n            uint256 lockedAmount,\n            uint256 expired,\n            uint256 hedgePremium,\n            uint256 unhedgePremium\n        );\n\n    /**\n     * @return state The state of the liquidity tranche: Invalid, Open, Closed\n     * @return share The liquidity provider's share in the pool\n     * @return amount The size of liquidity provided\n     * @return creationTimestamp The liquidity deposit timestamp\n     * @return hedged The liquidity tranche type: hedged or unhedged (classic)\n     **/\n    function tranches(uint256 id)\n        external\n        view\n        returns (\n            TrancheState state,\n            uint256 share,\n            uint256 amount,\n            uint256 creationTimestamp,\n            bool hedged\n        );\n}\n\ninterface ISettlementFeeRecipient {\n    function distributeUnrealizedRewards() external;\n}\n\n/**\n * @notice The interface for the contract that stakes HEGIC tokens\n *   through buying microlots (any amount of HEGIC tokens per microlot)\n *   and staking lots (888,000 HEGIC per lot), accumulates the staking\n *   rewards (settlement fees) and distributes the staking rewards among\n *   the microlots and staking lots holders (should be claimed manually).\n **/\ninterface IHegicStaking is ISettlementFeeRecipient {\n    event Claim(address indexed account, uint256 amount);\n    event Profit(uint256 amount);\n    event MicroLotsAcquired(address indexed account, uint256 amount);\n    event MicroLotsSold(address indexed account, uint256 amount);\n\n    function claimProfits(address account) external returns (uint256 profit);\n\n    function buyStakingLot(uint256 amount) external;\n\n    function sellStakingLot(uint256 amount) external;\n\n    function profitOf(address account) external view returns (uint256);\n}\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 value) external;\n}\n"
    },
    "contracts/utils/Math.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nlibrary HegicMath {\n    /**\n     * @dev Calculates a square root of the number.\n     * Responds with an \"invalid opcode\" at uint(-1).\n     **/\n    function sqrt(uint256 x) internal pure returns (uint256 result) {\n        result = x;\n        uint256 k = (x >> 1) + 1;\n        while (k < result) (result, k) = (k, (x / k + k) >> 1);\n    }\n}\n"
    },
    "contracts/PriceCalculators/ScaledStrikePriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../utils/Math.sol\";\nimport \"./BasePriceCalculator.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Price Calculator Contract\n * @notice The contract that calculates the options prices (the premiums)\n **/\n\nabstract contract ScaledStrikePriceCalculator is BasePriceCalculator {\n    using HegicMath for uint256;\n\n    uint256 public priceCorrectionRate;\n    uint256 internal constant PRICE_CORRECTION_DECIMALS = 10000;\n    uint8 internal roundedDecimals;\n\n    constructor(\n        AggregatorV3Interface _priceProvider,\n        uint256 _priceCorrectionRate,\n        uint8 _roundedDecimal\n    ) BasePriceCalculator(_priceProvider) {\n        priceCorrectionRate = _priceCorrectionRate;\n        roundedDecimals = _roundedDecimal;\n    }\n\n    function setPriceCorrectionRate(uint256 value) external onlyOwner {\n        priceCorrectionRate = value;\n    }\n\n    function _checkParams(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    )\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 sellingStrike =\n            round(\n                (_currentPrice() * priceCorrectionRate) /\n                    PRICE_CORRECTION_DECIMALS,\n                roundedDecimals\n            );\n        if (strike == 0) strike = sellingStrike;\n        require(\n            strike == sellingStrike,\n            \"PriceCalculator: The strike is invalid\"\n        );\n        return super._checkParams(period, amount, strike);\n    }\n\n    function round(uint256 value, uint8 decimals)\n        public\n        pure\n        returns (uint256 roundedValue)\n    {\n        if (decimals == 0) return value;\n        uint256 a = value / 10**(decimals - 1);\n        if (a % 10 < 5) return (a / 10) * 10**decimals;\n        return (a / 10 + 1) * 10**decimals;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals() external view returns (uint8);\n  function description() external view returns (string memory);\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "contracts/PriceCalculators/BasePriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../utils/Math.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Price Calculator Contract\n * @notice The contract that calculates the options prices (the premiums)\n **/\n\nabstract contract BasePriceCalculator is IPremiumCalculator, Ownable {\n    using HegicMath for uint256;\n\n    uint256 public minPeriod = 7 days;\n    uint256 public maxPeriod = 45 days;\n    AggregatorV3Interface public override priceProvider;\n\n    constructor(AggregatorV3Interface _priceProvider) {\n        priceProvider = _priceProvider;\n    }\n\n    function setPeriodLimits(uint256 min, uint256 max) external onlyOwner {\n        require(\n            min >= 1 days && max <= 90 days,\n            \"PriceCalculator: Period limits are wrong\"\n        );\n        maxPeriod = max;\n        minPeriod = min;\n        emit SetPeriodLimits(min, max);\n    }\n\n    function calculatePremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) public view override returns (uint256 premium) {\n        (period, amount, strike) = _checkParams(period, amount, strike);\n        return _calculatePeriodFee(period, amount, strike);\n    }\n\n    function _checkParams(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    )\n        internal\n        view\n        virtual\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        require(\n            period >= minPeriod,\n            \"PriceCalculator: The period is too short\"\n        );\n        require(period <= maxPeriod, \"PriceCalculator: The period is too long\");\n        if (strike == 0) strike = _currentPrice();\n        return (period, amount, strike);\n    }\n\n    /**\n     * @notice Calculates and prices in the time value of the option\n     * @param amount Option size\n     * @param period The option period in seconds (1 days <= period <= 90 days)\n     * @return fee The premium size to be paid\n     **/\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view virtual returns (uint256 fee);\n\n    /**\n     * @notice Used for requesting the current price of the asset\n     * using the ChainLink data feeds contracts.\n     * See https://feeds.chain.link/\n     * @return price Price\n     **/\n    function _currentPrice() internal view returns (uint256 price) {\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\n        price = uint256(latestPrice);\n    }\n}\n"
    },
    "contracts/PriceCalculators/CombinedPriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"./BasePriceCalculator.sol\";\nimport \"../utils/Math.sol\";\n\ncontract CombinePriceCalculator is BasePriceCalculator {\n    using HegicMath for uint256;\n\n    IPremiumCalculator[2] public basePricers;\n    int256[2] public coeficients;\n    uint256 internal constant COEFICIENTS_DECIMALS = 1e5;\n\n    constructor(\n        IPremiumCalculator[2] memory _basePricers,\n        int256[2] memory _coeficients\n    ) BasePriceCalculator(_basePricers[0].priceProvider()) {\n        basePricers = _basePricers;\n        coeficients = _coeficients;\n    }\n\n    function setCoefficients(int256[2] memory c) external onlyOwner {\n        coeficients = c;\n    }\n\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view virtual override returns (uint256 fee) {\n        return\n            uint256(\n                int256(\n                    basePricers[0].calculatePremium(period, amount, strike)\n                ) *\n                    coeficients[0] +\n                    int256(\n                        basePricers[1].calculatePremium(period, amount, strike)\n                    ) *\n                    coeficients[1]\n            ) / COEFICIENTS_DECIMALS;\n    }\n\n    function _checkParams(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    )\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256 _period,\n            uint256 _amount,\n            uint256 _strike\n        )\n    {\n        require(\n            strike == _currentPrice(),\n            \"PriceCalculator: The strike is invalid\"\n        );\n        (_period, _amount, ) = super._checkParams(period, amount, strike);\n    }\n}\n"
    },
    "contracts/utils/TakeProfit.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../OptionsManager/IOptionsManager.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Exerciser Contract\n * @notice The contract that allows to automatically exercise options half an hour before expiration\n **/\ncontract ExerciserTakeProfit {\n    IOptionsManager public immutable optionsManager;\n    mapping(uint256 => uint256) public takeProfits;\n    mapping(string => string) private mapContractsAddress;\n    mapping(IHegicPool => bool) isPutPool;\n    mapping(IHegicPool => bool) isCallPool;\n    event TakeProfitSet(uint256 indexed optionId, uint256 price);\n\n    constructor(\n        IOptionsManager manager,\n        IHegicPool[] memory callPool,\n        IHegicPool[] memory putPool\n    ) {\n        optionsManager = manager;\n        for (uint256 i = 0; i < callPool.length; i++) {\n            isCallPool[IHegicPool(callPool[i])] = true;\n        }\n        for (uint256 i = 0; i < putPool.length; i++) {\n            isPutPool[IHegicPool(putPool[i])] = true;\n        }\n    }\n\n    function setTakeProfitPrice(uint256 optionId, uint256 price) external {\n        require(\n            optionsManager.isApprovedOrOwner(msg.sender, optionId),\n            \"the option does not belong to msg.sender\"\n        );\n        takeProfits[optionId] = price;\n        emit TakeProfitSet(optionId, price);\n    }\n\n    function getTakeProfitPrice(uint256 optionId)\n        public\n        view\n        returns (uint256)\n    {\n        return takeProfits[optionId];\n    }\n\n    function _getPrices(IHegicPool pool, uint256 optionId)\n        private\n        returns (uint256 strike, uint256 latestPrice)\n    {\n        (, uint256 strike, , uint256 expired, , , ) = pool.options(optionId);\n        (, int256 price, , , ) = pool.priceProvider().latestRoundData();\n        uint256 latestPrice = uint256(price);\n        require(\n            takeProfits[optionId] != 0,\n            \"TakeProfit: Option holder should setTakeProfitPrice() before\"\n        );\n        return (strike, latestPrice);\n    }\n\n    function takeProfitCall(uint256 optionId) external {\n        IHegicPool pool = IHegicPool(optionsManager.tokenPool(optionId));\n        (uint256 strike, uint256 latestPrice) = _getPrices(pool, optionId);\n        require(isCallPool[pool], \"TakeProfit: CALL wrong type option\");\n        require(\n            latestPrice >= takeProfits[optionId],\n            \"TakeProfit: CALL Current price less than take price\"\n        );\n        pool.exercise(optionId);\n    }\n\n    function takeProfitPut(uint256 optionId) external {\n        IHegicPool pool = IHegicPool(optionsManager.tokenPool(optionId));\n        (uint256 strike, uint256 latestPrice) = _getPrices(pool, optionId);\n        require(isPutPool[pool], \"TakeProfit: PUT wrong type option\");\n        require(\n            latestPrice <= takeProfits[optionId],\n            \"TakeProfit: PUT Current price more than take price\"\n        );\n        pool.exercise(optionId);\n    }\n}\n"
    },
    "contracts/OptionsManager/IOptionsManager.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n/**\n * @notice The interface for the contract\n *   that tokenizes options as ERC721.\n **/\n\ninterface IOptionsManager is IERC721 {\n    /**\n     * @param holder The option buyer address\n     **/\n    function createOptionFor(address holder) external returns (uint256);\n\n    /**\n     * @param tokenId The ERC721 token ID linked to the option\n     **/\n    function tokenPool(uint256 tokenId) external returns (address pool);\n\n    /**\n     * @param spender The option buyer address or another address\n     *   with the granted permission to buy/exercise options on the user's behalf\n     * @param tokenId The ERC721 token ID linked to the option\n     **/\n    function isApprovedOrOwner(address spender, uint256 tokenId)\n        external\n        view\n        returns (bool);\n}\n"
    },
    "contracts/utils/HegicPlaygroundFaucet.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\";\nimport \"../OptionsManager/IOptionsManager.sol\";\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../Mocks/ERC20Mock.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Exerciser Contract\n * @notice The contract that allows to automatically exercise options half an hour before expiration\n **/\ncontract Faucet is BaseRelayRecipient, Ownable {\n    uint256 public ETHAmount = 0.2 ether;\n    uint256 public pgUSDAmount = 10_000e6;\n    ERC20Mock public immutable pgUSD;\n\n    string public override versionRecipient = \"2.2.5\";\n\n    constructor(ERC20Mock _pgUSD, address forwarder) {\n        pgUSD = _pgUSD;\n        _setTrustedForwarder(forwarder);\n    }\n\n    function _msgData()\n        internal\n        view\n        virtual\n        override(Context, BaseRelayRecipient)\n        returns (bytes calldata)\n    {\n        return BaseRelayRecipient._msgData();\n    }\n\n    function _msgSender()\n        internal\n        view\n        virtual\n        override(Context, BaseRelayRecipient)\n        returns (address)\n    {\n        return BaseRelayRecipient._msgSender();\n    }\n\n    function withdraw() external onlyOwner {\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function get() external {\n        pgUSD.mintTo(_msgSender(), pgUSDAmount);\n        payable(_msgSender()).transfer(ETHAmount);\n    }\n}\n"
    },
    "@opengsn/contracts/src/BaseRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable no-inline-assembly\npragma solidity >=0.6.9;\n\nimport \"./interfaces/IRelayRecipient.sol\";\n\n/**\n * A base contract to be inherited by any contract that want to receive relayed transactions\n * A subclass must use \"_msgSender()\" instead of \"msg.sender\"\n */\nabstract contract BaseRelayRecipient is IRelayRecipient {\n\n    /*\n     * Forwarder singleton we accept calls from\n     */\n    address private _trustedForwarder;\n\n    function trustedForwarder() public virtual view returns (address){\n        return _trustedForwarder;\n    }\n\n    function _setTrustedForwarder(address _forwarder) internal {\n        _trustedForwarder = _forwarder;\n    }\n\n    function isTrustedForwarder(address forwarder) public virtual override view returns(bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, return the original sender.\n     * otherwise, return `msg.sender`.\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal override virtual view returns (address ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            // At this point we know that the sender is a trusted forwarder,\n            // so we trust that the last bytes of msg.data are the verified sender address.\n            // extract sender address from the end of msg.data\n            assembly {\n                ret := shr(96,calldataload(sub(calldatasize(),20)))\n            }\n        } else {\n            ret = msg.sender;\n        }\n    }\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal override virtual view returns (bytes calldata ret) {\n        if (msg.data.length >= 20 && isTrustedForwarder(msg.sender)) {\n            return msg.data[0:msg.data.length-20];\n        } else {\n            return msg.data;\n        }\n    }\n}\n"
    },
    "contracts/Mocks/ERC20Mock.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol\";\n\n// import \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n// import \"hardhat/console.sol\";\n\ncontract ERC20Mock is ERC20 {\n    uint8 private immutable _decimals;\n\n    constructor(\n        string memory name,\n        string memory symbol,\n        uint8 __decimals\n    ) ERC20(name, symbol) {\n        _decimals = __decimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return _decimals;\n    }\n\n    function mintTo(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function mint(uint256 amount) public {\n        _mint(msg.sender, amount);\n    }\n}\n"
    },
    "@opengsn/contracts/src/interfaces/IRelayRecipient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0;\n\n/**\n * a contract must implement this interface in order to support relayed transaction.\n * It is better to inherit the BaseRelayRecipient as its implementation.\n */\nabstract contract IRelayRecipient {\n\n    /**\n     * return if the forwarder is trusted to forward relayed transactions to us.\n     * the forwarder is required to verify the sender's signature, and verify\n     * the call is not a replay.\n     */\n    function isTrustedForwarder(address forwarder) public virtual view returns(bool);\n\n    /**\n     * return the sender of this call.\n     * if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes\n     * of the msg.data.\n     * otherwise, return `msg.sender`\n     * should be used in the contract anywhere instead of msg.sender\n     */\n    function _msgSender() internal virtual view returns (address);\n\n    /**\n     * return the msg.data of this call.\n     * if the call came through our trusted forwarder, then the real sender was appended as the last 20 bytes\n     * of the msg.data - so this method will strip those 20 bytes off.\n     * otherwise (if the call was made directly and not through the forwarder), return `msg.data`\n     * should be used in the contract instead of msg.data, where this difference matters.\n     */\n    function _msgData() internal virtual view returns (bytes calldata);\n\n    function versionRecipient() external virtual view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedSafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SignedSafeMath {\n    /**\n     * @dev Returns the multiplication of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two signed integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the addition of two signed integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        return a + b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/presets/ERC20PresetMinterPauser.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../extensions/ERC20Burnable.sol\";\nimport \"../extensions/ERC20Pausable.sol\";\nimport \"../../../access/AccessControlEnumerable.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev {ERC20} token, including:\n *\n *  - ability for holders to burn (destroy) their tokens\n *  - a minter role that allows for token minting (creation)\n *  - a pauser role that allows to stop all token transfers\n *\n * This contract uses {AccessControl} to lock permissioned functions using the\n * different roles - head to its documentation for details.\n *\n * The account that deploys the contract will be granted the minter and pauser\n * roles, as well as the default admin role, which will let it grant both minter\n * and pauser roles to other accounts.\n */\ncontract ERC20PresetMinterPauser is Context, AccessControlEnumerable, ERC20Burnable, ERC20Pausable {\n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\");\n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\");\n\n    /**\n     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n     * account that deploys the contract.\n     *\n     * See {ERC20-constructor}.\n     */\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n\n        _setupRole(MINTER_ROLE, _msgSender());\n        _setupRole(PAUSER_ROLE, _msgSender());\n    }\n\n    /**\n     * @dev Creates `amount` new tokens for `to`.\n     *\n     * See {ERC20-_mint}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `MINTER_ROLE`.\n     */\n    function mint(address to, uint256 amount) public virtual {\n        require(hasRole(MINTER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have minter role to mint\");\n        _mint(to, amount);\n    }\n\n    /**\n     * @dev Pauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_pause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function pause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to pause\");\n        _pause();\n    }\n\n    /**\n     * @dev Unpauses all token transfers.\n     *\n     * See {ERC20Pausable} and {Pausable-_unpause}.\n     *\n     * Requirements:\n     *\n     * - the caller must have the `PAUSER_ROLE`.\n     */\n    function unpause() public virtual {\n        require(hasRole(PAUSER_ROLE, _msgSender()), \"ERC20PresetMinterPauser: must have pauser role to unpause\");\n        _unpause();\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override(ERC20, ERC20Pausable) {\n        super._beforeTokenTransfer(from, to, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../security/Pausable.sol\";\n\n/**\n * @dev ERC20 token with pausable token transfers, minting and burning.\n *\n * Useful for scenarios such as preventing trades until the end of an evaluation\n * period, or having an emergency switch for freezing all token transfers in the\n * event of a large bug.\n */\nabstract contract ERC20Pausable is ERC20, Pausable {\n    /**\n     * @dev See {ERC20-_beforeTokenTransfer}.\n     *\n     * Requirements:\n     *\n     * - the contract must not be paused.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, amount);\n\n        require(!paused(), \"ERC20Pausable: token transfer while paused\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControlEnumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./AccessControl.sol\";\nimport \"../utils/structs/EnumerableSet.sol\";\n\n/**\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\n */\ninterface IAccessControlEnumerable {\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\n\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\n}\n\n/**\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\n */\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns one of the accounts that have `role`. `index` must be a\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\n     *\n     * Role bearers are not sorted in any particular way, and their ordering may\n     * change at any point.\n     *\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n     * you perform all queries on the same block. See the following\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n     * for more information.\n     */\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\n        return _roleMembers[role].at(index);\n    }\n\n    /**\n     * @dev Returns the number of accounts that have `role`. Can be used\n     * together with {getRoleMember} to enumerate all bearers of a role.\n     */\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\n        return _roleMembers[role].length();\n    }\n\n    /**\n     * @dev Overload {grantRole} to track enumerable memberships\n     */\n    function grantRole(bytes32 role, address account) public virtual override {\n        super.grantRole(role, account);\n        _roleMembers[role].add(account);\n    }\n\n    /**\n     * @dev Overload {revokeRole} to track enumerable memberships\n     */\n    function revokeRole(bytes32 role, address account) public virtual override {\n        super.revokeRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {renounceRole} to track enumerable memberships\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        super.renounceRole(role, account);\n        _roleMembers[role].remove(account);\n    }\n\n    /**\n     * @dev Overload {_setupRole} to track enumerable memberships\n     */\n    function _setupRole(bytes32 role, address account) internal virtual override {\n        super._setupRole(role, account);\n        _roleMembers[role].add(account);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "contracts/Mocks/WETH.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./ERC20Mock.sol\";\n\ncontract WETHMock is ERC20Mock(\"WETH\", \"Wrapped Ether\", 18) {\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 amount) external {\n        _burn(msg.sender, amount);\n        payable(msg.sender).transfer(amount);\n    }\n}\n"
    },
    "contracts/Mocks/UniswapRouterMock.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./ERC20Mock.sol\";\nimport \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\";\n\ncontract UniswapRouterMock {\n    ERC20Mock public immutable WBTC;\n    ERC20Mock public immutable USDC;\n    AggregatorV3Interface public immutable WBTCPriceProvider;\n    AggregatorV3Interface public immutable ETHPriceProvider;\n\n    constructor(\n        ERC20Mock _wbtc,\n        ERC20Mock _usdc,\n        AggregatorV3Interface wpp,\n        AggregatorV3Interface epp\n    ) {\n        WBTC = _wbtc;\n        USDC = _usdc;\n        WBTCPriceProvider = wpp;\n        ETHPriceProvider = epp;\n    }\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 /*deadline*/\n    ) external payable returns (uint256[] memory amounts) {\n        require(path.length == 2, \"UniswapMock: wrong path\");\n        require(\n            path[1] == address(USDC) || path[1] == address(WBTC),\n            \"UniswapMock: too small value\"\n        );\n        amounts = getAmountsIn(amountOut, path);\n        require(msg.value >= amounts[0], \"UniswapMock: too small value\");\n        if (msg.value > amounts[0])\n            payable(msg.sender).transfer(msg.value - amounts[0]);\n        ERC20Mock(path[1]).mintTo(to, amountOut);\n    }\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        public\n        view\n        returns (uint256[] memory amounts)\n    {\n        require(path.length == 2, \"UniswapMock: wrong path\");\n        uint256 amount;\n        if (path[1] == address(USDC)) {\n            (, int256 ethPrice, , , ) = ETHPriceProvider.latestRoundData();\n            amount = (amountOut * 1e8) / uint256(ethPrice);\n        } else if (path[1] == address(WBTC)) {\n            (, int256 ethPrice, , , ) = ETHPriceProvider.latestRoundData();\n            (, int256 wbtcPrice, , , ) = WBTCPriceProvider.latestRoundData();\n            amount = (amountOut * uint256(wbtcPrice)) / uint256(ethPrice);\n        } else {\n            revert(\"UniswapMock: wrong path\");\n        }\n        amounts = new uint256[](2);\n        amounts[0] = (amount * 103) / 100;\n        amounts[1] = amountOut;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategy.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\";\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../Pool/IHegicOperationalTreasury.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./IHegicStrategy.sol\";\n\nabstract contract HegicStrategy is Ownable, IHegicStrategy, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    IHegicOperationalTreasury public immutable pool;\n    AggregatorV3Interface public immutable priceProvider;\n    uint8 public collateralizationRatio;\n    uint256 public override lockedLimit;\n    IPremiumCalculator public pricer;\n    uint256 internal immutable spotDecimals; // 1e18\n\n    uint256 private constant K_DECIMALS = 100;\n    uint256 public k = 100;\n\n    struct StrategyData {\n        uint128 amount;\n        uint128 strike;\n    }\n    mapping(uint256 => StrategyData) public strategyData;\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _collateralizationRatio,\n        uint256 limit,\n        uint8 _spotDecimals\n    ) {\n        pricer = _pricer;\n        pool = _pool;\n        priceProvider = _priceProvider;\n        collateralizationRatio = _collateralizationRatio;\n        lockedLimit = limit;\n        spotDecimals = 10**_spotDecimals;\n    }\n\n    function setPricer(IPremiumCalculator value) external onlyOwner {\n        pricer = value;\n    }\n\n    /**\n     * @notice Used for setting a limit\n     * on the total locked liquidity\n     * @param value The maximum locked liquidity\n     **/\n    function setLimit(uint256 value) external onlyOwner {\n        lockedLimit = value;\n        emit SetLimit(value);\n    }\n\n    /**\n     * @notice Used for viewing the total liquidity\n     * locked up for a specific options strategy\n     **/\n    function getLockedByStrategy()\n        external\n        view\n        override\n        returns (uint256 amount)\n    {\n        return pool.lockedByStrategy(address(this));\n    }\n\n    function _getAvailableContracts(uint32 period, uint256 strike)\n        internal\n        view\n        virtual\n        returns (uint256 available)\n    {\n        uint256 totalAvailableBalance =\n            pool.getStakeAndCoverBalance() +\n                pool.totalBalance() -\n                pool.totalLocked() -\n                pool.lockedPremium();\n        uint256 availableBalance =\n            lockedLimit - pool.lockedByStrategy(address(this));\n        if (strike == 0) strike = _currentPrice();\n        uint256 lockedAmount =\n            _calculateLockedAmount(uint128(spotDecimals), period, strike);\n        if (availableBalance > totalAvailableBalance) {\n            return (totalAvailableBalance * spotDecimals) / lockedAmount;\n        }\n        return (availableBalance * spotDecimals) / lockedAmount;\n    }\n\n    /**\n     * @notice Used for buying options/strategies\n     * @param holder The holder address\n     * @param period The option/strategy period\n     * @param amount The option/strategy amount\n     * @param strike The option/strategy strike\n     **/\n    function buy(\n        address holder,\n        uint32 period,\n        uint128 amount,\n        uint256 strike\n    ) external virtual nonReentrant returns (uint256 id) {\n        if (strike == 0) strike = _currentPrice();\n        uint256 premium = _calculatePremium(period, amount, strike);\n        uint128 lockedAmount = _calculateLockedAmount(amount, period, strike);\n\n        require(\n            pool.lockedByStrategy(address(this)) + lockedAmount <= lockedLimit,\n            \"HegicStrategy: The limit is exceeded\"\n        );\n\n        pool.token().safeTransferFrom(msg.sender, address(pool), premium);\n\n        uint32 expiration = uint32(block.timestamp + period);\n        id = pool.lockLiquidityFor(holder, lockedAmount, expiration);\n        strategyData[id] = StrategyData(uint128(amount), uint128(strike));\n        emit Acquired(id, amount, premium, strike, expiration);\n    }\n\n    /**\n     * @notice Used for exercising an in-the-money\n     * option/strategy and taking profits\n     * @param optionID The option/strategy ID\n     **/\n    function exercise(uint256 optionID) external {\n        uint256 amount = _profitOf(optionID);\n        require(\n            pool.manager().isApprovedOrOwner(msg.sender, optionID),\n            \"HegicStrategy: Msg.sender can't exercise this option\"\n        );\n        require(amount > 0, \"HegicStrategy: The profit is zero\");\n        pool.payOff(optionID, amount, pool.manager().ownerOf(optionID));\n    }\n\n    function _calculateLockedAmount(\n        uint128 amount,\n        uint32 period,\n        uint256 strike\n    ) internal view virtual returns (uint128 lockedAmount) {\n        return\n            uint128(\n                (pricer.calculatePremium(\n                    uint32(period),\n                    uint128(amount),\n                    strike\n                ) * k) / K_DECIMALS\n            );\n    }\n\n    function _calculatePremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view virtual returns (uint256 premium) {\n        if (strike == 0) strike = _currentPrice();\n        premium = pricer.calculatePremium(period, amount, strike);\n    }\n\n    function calculatePremium(\n        uint32 period,\n        uint256 amount,\n        uint256 strike\n    ) external view returns (uint256 premium, uint256 available) {\n        premium = _calculatePremium(period, amount, strike);\n        available = _getAvailableContracts(period, strike);\n    }\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        virtual\n        returns (uint256 profit);\n\n    function _currentPrice() internal view returns (uint256 price) {\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\n        price = uint256(latestPrice);\n    }\n\n    /**\n     * @notice Used for calculating the holder's\n     * option/strategy unrealized profits\n     * @param optionID The option/strategy ID\n     * @param amount The unrealized profits amount\n     **/\n    function profitOf(uint256 optionID) external view returns (uint256 amount) {\n        return _profitOf(optionID);\n    }\n\n    /**\n     * @notice Used for setting the collateralization coefficient\n     * @param value The collateralization coefficient\n     **/\n    function setK(uint256 value) external onlyOwner {\n        k = value;\n    }\n}\n"
    },
    "contracts/Pool/IHegicOperationalTreasury.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../OptionsManager/IOptionsManager.sol\";\n\ninterface IHegicOperationalTreasury {\n    enum LockedLiquidityState {Unlocked, Locked}\n\n    event Expired(uint256 indexed id);\n    event Paid(uint256 indexed id, address indexed account, uint256 amount);\n    event Replenished(uint256 amount);\n\n    struct LockedLiquidity {\n        LockedLiquidityState state;\n        address strategy;\n        uint128 amount;\n        uint128 premium;\n        uint32 expiration;\n    }\n\n    function manager() external view returns (IOptionsManager);\n\n    function token() external view returns (IERC20);\n\n    function lockLiquidityFor(\n        address holder,\n        uint128 amount,\n        uint32 expiration\n    ) external returns (uint256 optionID);\n\n    function payOff(\n        uint256 lockedLiquidityID,\n        uint256 amount,\n        address account\n    ) external;\n\n    function lockedByStrategy(address strategy)\n        external\n        view\n        returns (uint256 lockedAmount);\n\n    function getStakeAndCoverBalance() external view returns (uint256 balance);\n\n    function totalBalance() external view returns (uint256 totalBalance);\n\n    function lockedPremium() external view returns (uint256 lockedPremium);\n\n    function benchmark() external view returns (uint256 benchmark);\n\n    function totalLocked() external view returns (uint256 totalLocked);\n\n    /**\n     * @notice  Used for unlocking\n     * liquidity after an expiration\n     * @param lockedLiquidityID The option contract ID\n     **/\n    function unlock(uint256 lockedLiquidityID) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/Strategies/IHegicStrategy.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\ninterface IHegicStrategy {\n    event Acquired(\n        uint256 indexed id,\n        uint256 amount,\n        uint256 premium,\n        uint256 strike,\n        uint32 expiration\n    );\n\n    event AcquiredStrangle(\n        uint256 indexed id,\n        uint256 amount,\n        uint256 premium,\n        uint256 callStrike,\n        uint256 putStrike,\n        uint32 expiration\n    );\n\n    event AcquiredSpread(\n        uint256 indexed id,\n        uint256 amount,\n        uint256 premium,\n        uint256 atmStrike,\n        uint256 otmStrike,\n        uint32 expiration\n    );\n\n    event SetLimit(uint256 limit);\n\n    function getLockedByStrategy() external view returns (uint256 amount);\n\n    function lockedLimit() external view returns (uint256 lockedLimit);\n}\n"
    },
    "contracts/Strategies/HegicStrategyStrip.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyStrip is HegicStrategy {\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {}\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > data.strike) {\n            return _profitOfCall(data);\n        } else if (currentPrice < data.strike) {\n            return _profitOfPut(data);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((data.strike - currentPrice) *\n                (2 * data.amount) *\n                TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((currentPrice - data.strike) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategyStrap.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyStrap is HegicStrategy {\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {}\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > data.strike) {\n            return _profitOfCall(data);\n        } else if (currentPrice < data.strike) {\n            return _profitOfPut(data);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((data.strike - currentPrice) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((currentPrice - data.strike) *\n                (2 * data.amount) *\n                TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategyStrangle.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyStrangle is HegicStrategy {\n    using SafeERC20 for IERC20;\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n    uint256 public strikePercentage;\n    uint8 internal roundedDecimals;\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit,\n        uint256 percentage,\n        uint8 _roundedDecimals\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {\n        strikePercentage = percentage;\n        roundedDecimals = _roundedDecimals;\n    }\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        uint256 priceDecimals = 10**priceProvider.decimals();\n        uint256 callStrike =\n            round(\n                (data.strike * (100 + strikePercentage)) / 100,\n                roundedDecimals\n            );\n        uint256 putStrike =\n            round(\n                (data.strike * (100 - strikePercentage)) / 100,\n                roundedDecimals\n            );\n        if (currentPrice > callStrike) {\n            return\n                ((currentPrice - callStrike) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        } else if (currentPrice < putStrike) {\n            return\n                ((putStrike - currentPrice) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Used for buying options/strategies\n     * @param holder The holder address\n     * @param period The option/strategy period\n     * @param amount The option/strategy amount\n     * @param strike The option/strategy strike\n     **/\n    function buy(\n        address holder,\n        uint32 period,\n        uint128 amount,\n        uint256 strike\n    ) external override nonReentrant returns (uint256 id) {\n        if (strike == 0) strike = _currentPrice();\n        uint256 premium = _calculatePremium(period, amount, strike);\n        uint128 lockedAmount = _calculateLockedAmount(amount, period, strike);\n        uint256 callStrike =\n            round((strike * (100 + strikePercentage)) / 100, roundedDecimals);\n        uint256 putStrike =\n            round((strike * (100 - strikePercentage)) / 100, roundedDecimals);\n\n        require(\n            pool.lockedByStrategy(address(this)) + lockedAmount <= lockedLimit,\n            \"HegicStrategy: The limit is exceeded\"\n        );\n\n        pool.token().safeTransferFrom(msg.sender, address(pool), premium);\n\n        uint32 expiration = uint32(block.timestamp + period);\n        id = pool.lockLiquidityFor(holder, lockedAmount, expiration);\n        strategyData[id] = StrategyData(uint128(amount), uint128(strike));\n        emit AcquiredStrangle(\n            id,\n            amount,\n            premium,\n            callStrike,\n            putStrike,\n            expiration\n        );\n    }\n\n    function round(uint256 value, uint8 decimals)\n        public\n        pure\n        returns (uint256 roundedValue)\n    {\n        uint256 a = value / 10**(decimals - 1);\n        if (a % 10 < 5) return (a / 10) * 10**decimals;\n        return (a / 10 + 1) * 10**decimals;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategyStraddle.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyStraddle is HegicStrategy {\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {}\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > data.strike) {\n            return _profitOfCall(data);\n        } else if (currentPrice < data.strike) {\n            return _profitOfPut(data);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((data.strike - currentPrice) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(StrategyData memory data)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((currentPrice - data.strike) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            1e8;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategySpreadPut.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategySpreadPut is HegicStrategy {\n    using SafeERC20 for IERC20;\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n    uint8 internal roundedDecimals;\n    uint256 public strikePercentage;\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit,\n        uint256 percentage,\n        uint8 _roundedDecimals\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {\n        strikePercentage = percentage;\n        roundedDecimals = _roundedDecimals;\n    }\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        uint256 otmStrike =\n            round((data.strike * strikePercentage) / 100, roundedDecimals);\n        uint256 priceDecimals = 10**priceProvider.decimals();\n        if (currentPrice < data.strike && currentPrice > otmStrike) {\n            return\n                ((data.strike - currentPrice) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        } else if (currentPrice < data.strike && currentPrice < otmStrike) {\n            return\n                ((data.strike - otmStrike) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Used for buying options/strategies\n     * @param holder The holder address\n     * @param period The option/strategy period\n     * @param amount The option/strategy amount\n     * @param strike The option/strategy strike\n     **/\n    function buy(\n        address holder,\n        uint32 period,\n        uint128 amount,\n        uint256 strike\n    ) external override nonReentrant returns (uint256 id) {\n        if (strike == 0) strike = _currentPrice();\n        uint256 premium = _calculatePremium(period, amount, strike);\n        uint128 lockedAmount = _calculateLockedAmount(amount, period, strike);\n        uint256 otmStrike =\n            round((strike * strikePercentage) / 100, roundedDecimals);\n\n        require(\n            pool.lockedByStrategy(address(this)) + lockedAmount <= lockedLimit,\n            \"HegicStrategy: The limit is exceeded\"\n        );\n\n        pool.token().safeTransferFrom(msg.sender, address(pool), premium);\n\n        uint32 expiration = uint32(block.timestamp + period);\n        id = pool.lockLiquidityFor(holder, lockedAmount, expiration);\n        strategyData[id] = StrategyData(uint128(amount), uint128(strike));\n        emit AcquiredSpread(id, amount, premium, strike, otmStrike, expiration);\n    }\n\n    function round(uint256 value, uint8 decimals)\n        public\n        pure\n        returns (uint256 roundedValue)\n    {\n        uint256 a = value / 10**(decimals - 1);\n        if (a % 10 < 5) return (a / 10) * 10**decimals;\n        return (a / 10 + 1) * 10**decimals;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategySpreadCall.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategySpreadCall is HegicStrategy {\n    using SafeERC20 for IERC20;\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n    uint8 internal roundedDecimals;\n    uint256 public strikePercentage;\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit,\n        uint256 percentage,\n        uint8 _roundedDecimals\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {\n        strikePercentage = percentage;\n        roundedDecimals = _roundedDecimals;\n    }\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        uint256 otmStrike =\n            round((data.strike * strikePercentage) / 100, roundedDecimals);\n        uint256 priceDecimals = 10**priceProvider.decimals();\n        if (currentPrice > data.strike && currentPrice < otmStrike) {\n            return\n                ((currentPrice - data.strike) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        } else if (currentPrice > data.strike && currentPrice > otmStrike) {\n            return\n                ((otmStrike - data.strike) * data.amount * TOKEN_DECIMALS) /\n                spotDecimals /\n                priceDecimals;\n        }\n        return 0;\n    }\n\n    /**\n     * @notice Used for buying options/strategies\n     * @param holder The holder address\n     * @param period The option/strategy period\n     * @param amount The option/strategy amount\n     * @param strike The option/strategy strike\n     **/\n    function buy(\n        address holder,\n        uint32 period,\n        uint128 amount,\n        uint256 strike\n    ) external override nonReentrant returns (uint256 id) {\n        if (strike == 0) strike = _currentPrice();\n        uint256 premium = _calculatePremium(period, amount, strike);\n        uint128 lockedAmount = _calculateLockedAmount(amount, period, strike);\n        uint256 otmStrike =\n            round((strike * strikePercentage) / 100, roundedDecimals);\n\n        require(\n            pool.lockedByStrategy(address(this)) + lockedAmount <= lockedLimit,\n            \"HegicStrategy: The limit is exceeded\"\n        );\n\n        pool.token().safeTransferFrom(msg.sender, address(pool), premium);\n\n        uint32 expiration = uint32(block.timestamp + period);\n        id = pool.lockLiquidityFor(holder, lockedAmount, expiration);\n        strategyData[id] = StrategyData(uint128(amount), uint128(strike));\n        emit AcquiredSpread(id, amount, premium, strike, otmStrike, expiration);\n    }\n\n    function round(uint256 value, uint8 decimals)\n        public\n        pure\n        returns (uint256 roundedValue)\n    {\n        uint256 a = value / 10**(decimals - 1);\n        if (a % 10 < 5) return (a / 10) * 10**decimals;\n        return (a / 10 + 1) * 10**decimals;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategyPut.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyPut is HegicStrategy {\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {}\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > data.strike) return 0;\n        uint256 priceDecimals = 10**priceProvider.decimals();\n        return\n            ((data.strike - currentPrice) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            priceDecimals;\n    }\n}\n"
    },
    "contracts/Strategies/HegicStrategyCall.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicStrategy.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\ncontract HegicStrategyCall is HegicStrategy {\n    // uint256 private immutable spotDecimals; // 1e18\n    uint256 private constant TOKEN_DECIMALS = 1e6; // 1e6\n\n    constructor(\n        IHegicOperationalTreasury _pool,\n        AggregatorV3Interface _priceProvider,\n        IPremiumCalculator _pricer,\n        uint8 _spotDecimals,\n        uint256 limit\n    ) HegicStrategy(_pool, _priceProvider, _pricer, 10, limit, _spotDecimals) {}\n\n    function _profitOf(uint256 optionID)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        StrategyData memory data = strategyData[optionID];\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice < data.strike) return 0;\n        uint256 priceDecimals = 10**priceProvider.decimals();\n        return\n            ((currentPrice - data.strike) * data.amount * TOKEN_DECIMALS) /\n            spotDecimals /\n            priceDecimals;\n    }\n}\n"
    },
    "contracts/Pool/HegicStakeAndCover.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./IHegicStakeAndCover.sol\";\nimport \"hardhat/console.sol\";\n\ncontract HegicStakeAndCover is\n    IHegicStakeAndCover,\n    AccessControl,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable hegicToken;\n    IERC20 public immutable baseToken;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => uint256) public startBalance;\n    address internal unlockedTokenRecipient;\n\n    bool public withdrawalsEnabled;\n    uint256 public totalBalance;\n    bytes32 public constant HEGIC_POOL_ROLE = keccak256(\"HEGIC_POOL_ROLE\");\n\n    constructor(IERC20 _hegic, IERC20 _baseToken) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        hegicToken = _hegic;\n        baseToken = _baseToken;\n        unlockedTokenRecipient = msg.sender;\n    }\n\n    /**\n     * @notice Used for withdrawing of deposited\n     * tokens from the contract\n     * @param to The recipient address\n     * @param amount The amount to withdraw\n     **/\n    function transfer(address to, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        baseToken.safeTransfer(to, amount);\n    }\n\n    function availableBalance() external view override returns (uint256) {\n        return baseToken.balanceOf(address(this));\n    }\n\n    /**\n     * @notice Used for transferring tokens for replenishing\n     * of the Hegic Operational Treasury contract\n     * @param amount The amount to transfer\n     **/\n    function payOut(uint256 amount)\n        external\n        override\n        onlyRole(HEGIC_POOL_ROLE)\n    {\n        baseToken.safeTransfer(msg.sender, amount);\n    }\n\n    /**\n     * @notice Used for adding tokens\n     * to the unlockedTokenRecipient balance\n     **/\n    function saveFreeTokens() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 amount = hegicToken.balanceOf(address(this)) - totalBalance;\n        totalBalance += amount;\n        balanceOf[unlockedTokenRecipient] += amount;\n        startBalance[unlockedTokenRecipient] = shareOf(unlockedTokenRecipient);\n    }\n\n    /**\n     * @notice Used for calculating\n     * the user's balance in the base token\n     * @param holder The user address\n     **/\n    function shareOf(address holder) public view returns (uint256) {\n        return\n            (baseToken.balanceOf(address(this)) * balanceOf[holder]) /\n            totalBalance;\n    }\n\n    /**\n     * @notice Used for setting the shares\n     * among the eligible users\n     * @param account The user address\n     * @param amount The share size\n     **/\n    function transferShare(address account, uint256 amount) external {\n        require(profitOf(msg.sender) == 0);\n        require(profitOf(account) == 0);\n\n        balanceOf[msg.sender] -= amount;\n        balanceOf[account] += amount;\n        startBalance[msg.sender] = shareOf(msg.sender);\n        startBalance[account] = shareOf(account);\n    }\n\n    /**\n     * @notice Used for calculating the claimable profit\n     * @param account The user address\n     **/\n    function profitOf(address account)\n        public\n        view\n        returns (uint256 profitAmount)\n    {\n        return shareOf(account) - startBalance[account];\n    }\n\n    /**\n     * @notice Used for withdrawing tokens from the contract\n     * @param amount The amount of tokens\n     **/\n    function withdraw(uint256 amount) external nonReentrant {\n        require(\n            withdrawalsEnabled,\n            \"HegicStakeAndCover: Withdrawals are currently disabled\"\n        );\n        _withdraw(msg.sender, msg.sender, amount);\n    }\n\n    /**\n     * @notice Used for enabling the token\n     * transfers from the contract\n     * @param value True or false\n     **/\n    function setWithdrawalsEnabled(bool value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        withdrawalsEnabled = value;\n    }\n\n    /**\n     * @notice Used for claiming profits\n     * accumulated on the contract\n     **/\n    function claimProfit() public nonReentrant returns (uint256 profit) {\n        profit = profitOf(msg.sender);\n        require(profit > 0, \"HegicStakeAndCover: The claimable profit is zero\");\n        uint256 profitShare =\n            (profit * totalBalance) / baseToken.balanceOf(address(this));\n        _withdraw(msg.sender, unlockedTokenRecipient, profitShare);\n    }\n\n    function _withdraw(\n        address account,\n        address hegicDestination,\n        uint256 amount\n    ) internal {\n        uint256 liquidityShare =\n            (amount * baseToken.balanceOf(address(this))) / totalBalance;\n        balanceOf[account] -= amount;\n        startBalance[account] = shareOf(account);\n        totalBalance -= amount;\n        hegicToken.safeTransfer(hegicDestination, amount);\n        baseToken.safeTransfer(account, liquidityShare);\n        emit Withdrawn(msg.sender, hegicDestination, amount, liquidityShare);\n    }\n\n    /**\n     * @notice Used for depositing tokens into the contract\n     *         HegicStakeAndCover should first be initialized with 'saveFreeTokens()'\n     *         before making any deposits into the contract\n     * @param amount The amount of tokens\n     **/\n    function provide(uint256 amount) external nonReentrant {\n        require(profitOf(msg.sender) == 0, \"Claim your profit\");\n        uint256 baseBalance = baseToken.balanceOf(address(this));\n        require(\n            baseBalance > 0 && totalBalance > 0,\n            \"The pool should first be initialized\"\n        );\n        uint256 liquidityShare =\n            (amount * baseToken.balanceOf(address(this))) / totalBalance;\n        balanceOf[msg.sender] += amount;\n        startBalance[msg.sender] = shareOf(msg.sender);\n        totalBalance += amount;\n        hegicToken.safeTransferFrom(msg.sender, address(this), amount);\n        baseToken.safeTransferFrom(msg.sender, address(this), liquidityShare);\n        emit Provided(msg.sender, amount, liquidityShare);\n    }\n}\n"
    },
    "contracts/Pool/IHegicStakeAndCover.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../OptionsManager/IOptionsManager.sol\";\n\ninterface IHegicStakeAndCover {\n    event Provided(address indexed by, uint256 hAmount, uint256 tokenAmount);\n    event Withdrawn(\n        address indexed by,\n        address indexed hegicDestination,\n        uint256 hAmount,\n        uint256 tokenAmount\n    );\n\n    function availableBalance() external view returns (uint256);\n\n    function payOut(uint256 amount) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/utils/HegicStakeAndCoverDistributor.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./ERC20Recovery.sol\";\nimport \"../Pool/HegicStakeAndCover.sol\";\n\ncontract HegicStakeAndCoverDistributor is Ownable, ERC20Recovery {\n    HegicStakeAndCover public immutable sac;\n\n    struct TransferItem {\n        address account;\n        uint256 amount;\n    }\n\n    constructor(HegicStakeAndCover _sac) {\n        sac = _sac;\n    }\n\n    function distribute(TransferItem[] calldata transfers) external onlyOwner {\n        if (sac.profitOf(address(this)) > 0) sac.claimProfit();\n        for (uint32 i; i < transfers.length; i++) {\n            TransferItem memory ti = transfers[i];\n            sac.transferShare(ti.account, ti.amount);\n        }\n    }\n}\n"
    },
    "contracts/utils/ERC20Recovery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nabstract contract ERC20Recovery is Ownable {\n    using SafeERC20 for IERC20;\n\n    function recoverERC20(IERC20 token) external onlyOwner {\n        token.safeTransfer(owner(), token.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/Staking/HegicStaking.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Staking Contract\n * @notice The contract that stakes the HEGIC tokens through\n * buying the microlots (any amount of HEGIC tokens per microlot)\n * and the staking lots (888,000 HEGIC per lot), accumulates the staking\n * rewards (settlement fees) and distributes the staking rewards among\n * the microlots and staking lots holders (should be claimed manually).\n **/\n\ncontract HegicStaking is ERC20, IHegicStaking {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable HEGIC;\n    IERC20 public immutable token;\n\n    uint256 public constant STAKING_LOT_PRICE = 888_000e18;\n    uint256 internal constant ACCURACY = 1e30;\n    uint256 internal realisedBalance;\n\n    uint256 public microLotsTotal = 0;\n    mapping(address => uint256) public microBalance;\n\n    uint256 public totalProfit = 0;\n    mapping(address => uint256) internal lastProfit;\n\n    uint256 public microLotsProfits = 0;\n    mapping(address => uint256) internal lastMicroLotProfits;\n\n    mapping(address => uint256) internal savedProfit;\n\n    uint256 public classicLockupPeriod = 1 days;\n    uint256 public microLockupPeriod = 1 days;\n\n    mapping(address => uint256) public lastBoughtTimestamp;\n    mapping(address => uint256) public lastMicroBoughtTimestamp;\n    mapping(address => bool) public _revertTransfersInLockUpPeriod;\n\n    constructor(\n        ERC20 _hegic,\n        ERC20 _token,\n        string memory name,\n        string memory short\n    ) ERC20(name, short) {\n        HEGIC = _hegic;\n        token = _token;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 0;\n    }\n\n    /**\n     * @notice Used by the HEGIC microlots holders\n     * or staking lots holders for claiming\n     * the accumulated staking rewards.\n     **/\n    function claimProfits(address account)\n        external\n        override\n        returns (uint256 profit)\n    {\n        saveProfits(account);\n        profit = savedProfit[account];\n        require(profit > 0, \"Zero profit\");\n        savedProfit[account] = 0;\n        realisedBalance -= profit;\n        token.safeTransfer(account, profit);\n        emit Claim(account, profit);\n    }\n\n    /**\n     * @notice Used for staking any amount of the HEGIC tokens\n     * higher than zero in the form of buying the microlot\n     * for receiving a pro rata share of 20% of the total staking\n     * rewards (settlement fees) generated by the protocol.\n     **/\n    function buyMicroLot(uint256 amount) external {\n        require(amount > 0, \"Amount is zero\");\n        saveProfits(msg.sender);\n        lastMicroBoughtTimestamp[msg.sender] = block.timestamp;\n        microLotsTotal += amount;\n        microBalance[msg.sender] += amount;\n        HEGIC.safeTransferFrom(msg.sender, address(this), amount);\n        emit MicroLotsAcquired(msg.sender, amount);\n    }\n\n    /**\n     * @notice Used for unstaking the HEGIC tokens\n     * in the form of selling the microlot.\n     **/\n    function sellMicroLot(uint256 amount) external {\n        require(amount > 0, \"Amount is zero\");\n        require(\n            lastMicroBoughtTimestamp[msg.sender] + microLockupPeriod <\n                block.timestamp,\n            \"The action is suspended due to the lockup\"\n        );\n        saveProfits(msg.sender);\n        microLotsTotal -= amount;\n        microBalance[msg.sender] -= amount;\n        HEGIC.safeTransfer(msg.sender, amount);\n        emit MicroLotsSold(msg.sender, amount);\n    }\n\n    /**\n     * @notice Used for staking the fixed amount of 888,000 HEGIC\n     * tokens in the form of buying the staking lot (transferrable)\n     * for receiving a pro rata share of 80% of the total staking\n     * rewards (settlement fees) generated by the protocol.\n     **/\n    function buyStakingLot(uint256 amount) external override {\n        lastBoughtTimestamp[msg.sender] = block.timestamp;\n        require(amount > 0, \"Amount is zero\");\n        _mint(msg.sender, amount);\n        HEGIC.safeTransferFrom(\n            msg.sender,\n            address(this),\n            amount * STAKING_LOT_PRICE\n        );\n    }\n\n    /**\n     * @notice Used for unstaking 888,000 HEGIC\n     * tokens in the form of selling the staking lot.\n     **/\n    function sellStakingLot(uint256 amount) external override lockupFree {\n        _burn(msg.sender, amount);\n        HEGIC.safeTransfer(msg.sender, amount * STAKING_LOT_PRICE);\n    }\n\n    function revertTransfersInLockUpPeriod(bool value) external {\n        _revertTransfersInLockUpPeriod[msg.sender] = value;\n    }\n\n    /**\n     * @notice Returns the amount of unclaimed staking rewards.\n     **/\n    function profitOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        (uint256 profit, uint256 micro) = getUnsavedProfits(account);\n        return savedProfit[account] + profit + micro;\n    }\n\n    /**\n     * @notice Used for calculating the amount of accumulated\n     * staking rewards before the share of the staking participant\n     * changes higher (buying more microlots or staking lots)\n     * or lower (selling more microlots or staking lots).\n     **/\n    function getUnsavedProfits(address account)\n        internal\n        view\n        returns (uint256 total, uint256 micro)\n    {\n        total =\n            ((totalProfit - lastProfit[account]) * balanceOf(account)) /\n            ACCURACY;\n        micro =\n            ((microLotsProfits - lastMicroLotProfits[account]) *\n                microBalance[account]) /\n            ACCURACY;\n    }\n\n    /**\n     * @notice Used for saving the amount of accumulated\n     * staking rewards before the staking participant's share\n     * changes higher (buying more microlots or staking lots)\n     * or lower (selling more microlots or staking lots).\n     **/\n    function saveProfits(address account) internal {\n        (uint256 unsaved, uint256 micro) = getUnsavedProfits(account);\n        lastProfit[account] = totalProfit;\n        lastMicroLotProfits[account] = microLotsProfits;\n        savedProfit[account] += unsaved;\n        savedProfit[account] += micro;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256\n    ) internal override {\n        if (from != address(0)) saveProfits(from);\n        if (to != address(0)) saveProfits(to);\n        if (\n            lastBoughtTimestamp[from] + classicLockupPeriod > block.timestamp &&\n            lastBoughtTimestamp[from] > lastBoughtTimestamp[to]\n        ) {\n            require(\n                !_revertTransfersInLockUpPeriod[to],\n                \"The recipient does not agree to accept the locked funds\"\n            );\n            lastBoughtTimestamp[to] = lastBoughtTimestamp[from];\n        }\n    }\n\n    /**\n     * @notice Used for distributing the staking rewards\n     * among the microlots and staking lots holders.\n     **/\n    function distributeUnrealizedRewards() external override {\n        uint256 amount = token.balanceOf(address(this)) - realisedBalance;\n        realisedBalance += amount;\n        uint256 _totalSupply = totalSupply();\n        if (microLotsTotal + _totalSupply > 0) {\n            if (microLotsTotal == 0) {\n                totalProfit += (amount * ACCURACY) / _totalSupply;\n            } else if (_totalSupply == 0) {\n                microLotsProfits += (amount * ACCURACY) / microLotsTotal;\n            } else {\n                uint256 microAmount = amount / 5;\n                uint256 baseAmount = amount - microAmount;\n                microLotsProfits += (microAmount * ACCURACY) / microLotsTotal;\n                totalProfit += (baseAmount * ACCURACY) / _totalSupply;\n            }\n            emit Profit(amount);\n        }\n    }\n\n    modifier lockupFree {\n        require(\n            lastBoughtTimestamp[msg.sender] + classicLockupPeriod <=\n                block.timestamp,\n            \"The action is suspended due to the lockup\"\n        );\n        _;\n    }\n}\n"
    },
    "contracts/utils/HLTPs.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @dev A contract that allows to lock-up the rewards in\n * the Hegic Long-Term Pools during a certain period of time.\n */\ncontract HLTPs {\n    using SafeERC20 for IERC20;\n\n    // The beneficiary of rewards after they are released\n    address private immutable _beneficiary;\n\n    // The timestamp when the rewards release will be enabled\n    uint256 private immutable _releaseTime;\n\n    constructor(uint256 releaseTime_) {\n        _beneficiary = msg.sender;\n        _releaseTime = releaseTime_;\n    }\n\n    /**\n     * @return The beneficiary address that will distribute the rewards.\n     */\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    /**\n     * @return The point of time when the rewards will be released.\n     */\n    function releaseTime() public view returns (uint256) {\n        return _releaseTime;\n    }\n\n    /**\n     * @notice Transfers tokens locked by timelock to beneficiary.\n     */\n    function release(IERC20 token) public {\n        require(\n            block.timestamp >= releaseTime(),\n            \"HLTPs: Current time is earlier than the release time\"\n        );\n\n        uint256 amount = token.balanceOf(address(this));\n        require(amount > 0, \"HLTPs: No rewards to be released\");\n\n        token.safeTransfer(beneficiary(), amount);\n    }\n}\n"
    },
    "contracts/Staking/SettlementFeeDistributor.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\nimport \"../Interfaces/Interfaces.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract SettlementFeeDistributor is ISettlementFeeRecipient, Ownable {\n    using SafeERC20 for IERC20;\n    ISettlementFeeRecipient public immutable staking;\n    IERC20 public immutable token;\n    address public immutable HLTPs;\n    uint128 public totalShare = 24;\n    uint128 public stakingShare = 19;\n\n    constructor(\n        ISettlementFeeRecipient staking_,\n        IERC20 token_,\n        address HLTPs_\n    ) {\n        staking = staking_;\n        token = token_;\n        HLTPs = HLTPs_;\n    }\n\n    function setShares(uint128 stakingShare_, uint128 totalShare_)\n        external\n        onlyOwner\n    {\n        require(\n            totalShare_ != 0,\n            \"SettlementFeeDistributor: totalShare is zero\"\n        );\n        require(\n            stakingShare_ <= totalShare,\n            \"SettlementFeeDistributor: stakingShare is too large\"\n        );\n        totalShare = totalShare_;\n        stakingShare = stakingShare_;\n    }\n\n    function distributeUnrealizedRewards() external override {\n        uint256 amount = token.balanceOf(address(this));\n\n        require(amount > 0, \"SettlementFeeDistributor: Amount is zero\");\n\n        uint256 stakingAmount = (amount * stakingShare) / totalShare;\n        token.safeTransfer(HLTPs, amount - stakingAmount);\n        token.safeTransfer(address(staking), stakingAmount);\n        staking.distributeUnrealizedRewards();\n    }\n}\n"
    },
    "contracts/Pool/HegicOperationalTreasury.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2022 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../OptionsManager/OptionsManager.sol\";\nimport \"./IHegicOperationalTreasury.sol\";\nimport \"./IHegicStakeAndCover.sol\";\n\ncontract HegicOperationalTreasury is\n    IHegicOperationalTreasury,\n    AccessControl,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable override token;\n    IOptionsManager public immutable override manager;\n    IHegicStakeAndCover public stakeandcoverPool;\n    bytes32 public constant STRATEGY_ROLE = keccak256(\"STRATEGY_ROLE\");\n    mapping(uint256 => LockedLiquidity) public lockedLiquidity;\n    mapping(address => uint256) public override lockedByStrategy;\n    uint256 public override benchmark;\n\n    uint256 public override lockedPremium;\n    uint256 public override totalLocked;\n    uint256 public override totalBalance;\n    uint256 public maxLockupPeriod;\n\n    constructor(\n        IERC20 _token,\n        IOptionsManager _manager,\n        uint256 _maxLockupPeriod,\n        IHegicStakeAndCover _stakeandcoverPool,\n        uint256 _benchmark\n    ) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        token = _token;\n        manager = _manager;\n        maxLockupPeriod = _maxLockupPeriod;\n        stakeandcoverPool = _stakeandcoverPool;\n        benchmark = _benchmark;\n    }\n\n    /**\n     * @notice Used for withdrawing deposited\n     * tokens from the contract\n     * @param to The recipient address\n     * @param amount The amount to withdraw\n     **/\n    function withdraw(address to, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        _withdraw(to, amount);\n    }\n\n    /**replenish\n     * @notice Used for replenishing of\n     * the Hegic Operational Treasury contract\n     **/\n    function replenish() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        _replenish(0);\n    }\n\n    function getStakeAndCoverBalance()\n        external\n        view\n        override\n        returns (uint256 balance)\n    {\n        return stakeandcoverPool.availableBalance();\n    }\n\n    /**\n     * @notice Used for locking liquidity in an active options strategy\n     * @param holder The option strategy holder address\n     * @param amount The amount of options strategy contract\n     * @param expiration The options strategy expiration time\n     **/\n    function lockLiquidityFor(\n        address holder,\n        uint128 amount,\n        uint32 expiration\n    ) external override onlyRole(STRATEGY_ROLE) returns (uint256 optionID) {\n        totalLocked += amount;\n        uint128 premium = uint128(_addTokens());\n        lockedPremium += premium;\n\n        require(\n            totalLocked + lockedPremium <=\n                totalBalance + stakeandcoverPool.availableBalance(),\n            \"The amount is too large\"\n        );\n        require(\n            block.timestamp + maxLockupPeriod >= expiration,\n            \"The period is too long\"\n        );\n        lockedByStrategy[msg.sender] += amount;\n        optionID = manager.createOptionFor(holder);\n        lockedLiquidity[optionID] = LockedLiquidity(\n            LockedLiquidityState.Locked,\n            msg.sender,\n            amount,\n            premium,\n            expiration\n        );\n    }\n\n    /**\n     * @notice Used for setting the initial\n     * contract benchmark for calculating\n     * future profits or losses\n     * @param value The benchmark value\n     **/\n    function setBenchmark(uint256 value) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        benchmark = value;\n    }\n\n    function _unlock(LockedLiquidity storage ll) internal {\n        require(\n            ll.state == LockedLiquidityState.Locked,\n            \"The liquidity has already been unlocked\"\n        );\n        ll.state = LockedLiquidityState.Unlocked;\n        totalLocked -= ll.amount;\n        lockedPremium -= ll.premium;\n        lockedByStrategy[ll.strategy] -= ll.amount;\n    }\n\n    /**\n     * @notice  Used for unlocking\n     * liquidity after an expiration\n     * @param lockedLiquidityID The option contract ID\n     **/\n    function unlock(uint256 lockedLiquidityID) external override {\n        LockedLiquidity storage ll = lockedLiquidity[lockedLiquidityID];\n        require(\n            block.timestamp > ll.expiration,\n            \"The expiration time has not yet come\"\n        );\n        _unlock(ll);\n        emit Expired(lockedLiquidityID);\n    }\n\n    /**\n     * @notice Used for paying off the profits\n     * if an option is exercised in-the-money\n     * @param lockedLiquidityID The option contract ID\n     * @param amount The amount to pay off\n     * @param account The holder address\n     **/\n    function payOff(\n        uint256 lockedLiquidityID,\n        uint256 amount,\n        address account\n    ) external override nonReentrant {\n        LockedLiquidity storage ll = lockedLiquidity[lockedLiquidityID];\n\n        require(\n            ll.expiration > block.timestamp,\n            \"The option has already expired\"\n        );\n        require(ll.strategy == msg.sender);\n        require(account != address(0));\n        require(amount != 0);\n\n        _unlock(ll);\n\n        if (totalBalance < amount) {\n            _replenish(amount);\n        }\n\n        _withdraw(account, amount);\n\n        emit Paid(lockedLiquidityID, account, amount);\n    }\n\n    function _replenish(uint256 additionalAmount) internal {\n        uint256 transferAmount =\n            benchmark + additionalAmount + lockedPremium - totalBalance;\n        stakeandcoverPool.payOut(transferAmount);\n        totalBalance += transferAmount;\n        emit Replenished(transferAmount);\n    }\n\n    /**\n     * @notice Used for adding deposited tokens\n     * (e.g. premiums) to the contract's totalBalance\n     * @param amount The amount of tokens to add\n     **/\n    function addTokens()\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n        returns (uint256 amount)\n    {\n        return _addTokens();\n    }\n\n    function _addTokens() private returns (uint256 amount) {\n        amount = token.balanceOf(address(this)) - totalBalance;\n        totalBalance += amount;\n    }\n\n    function _withdraw(address to, uint256 amount) private {\n        require(\n            amount + totalLocked + lockedPremium <=\n                totalBalance + stakeandcoverPool.availableBalance(),\n            \"The amount to withdraw is too large\"\n        );\n        totalBalance -= amount;\n        token.safeTransfer(to, amount);\n    }\n}\n"
    },
    "contracts/OptionsManager/OptionsManager.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./IOptionsManager.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Options Manager Contract\n * @notice The contract that buys the options contracts for the options holders\n * as well as checks whether the contract that is used for buying/exercising\n * options has been been granted with the permission to do it on the user's behalf.\n **/\n\ncontract OptionsManager is\n    IOptionsManager,\n    ERC721(\"Hegic V8888 Options (Tokenized)\", \"HOT8888\"),\n    AccessControl\n{\n    bytes32 public constant HEGIC_POOL_ROLE = keccak256(\"HEGIC_POOL_ROLE\");\n    uint256 public nextTokenId = 0;\n    mapping(uint256 => address) public override tokenPool;\n\n    constructor() {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    /**\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\n     * https://eips.ethereum.org/EIPS/eip-165\n     **/\n    function createOptionFor(address holder)\n        public\n        override\n        onlyRole(HEGIC_POOL_ROLE)\n        returns (uint256 id)\n    {\n        id = nextTokenId++;\n        tokenPool[id] = msg.sender;\n        _safeMint(holder, id);\n    }\n\n    /**\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\n     * https://eips.ethereum.org/EIPS/eip-165\n     **/\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, AccessControl, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IOptionsManager).interfaceId ||\n            AccessControl.supportsInterface(interfaceId) ||\n            ERC721.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Used for checking whether the user has approved\n     * the contract to buy/exercise the options on her behalf.\n     * @param spender The address of the contract\n     * that is used for exercising the options\n     * @param tokenId The ERC721 token ID that is linked to the option\n     **/\n    function isApprovedOrOwner(address spender, uint256 tokenId)\n        external\n        view\n        virtual\n        override\n        returns (bool)\n    {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner ||\n            getApproved(tokenId) == spender ||\n            isApprovedForAll(owner, spender));\n    }\n}\n"
    },
    "contracts/utils/Unlocker.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Pool/IHegicOperationalTreasury.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol hardcore-beta Unlocker Contract\n * @notice The contract that allows to automatically unlocks an array of options\n **/\ncontract Unlocker {\n    /**\n     * @notice Unlocks the array of options.\n     * @param optionIDs The array of options\n     **/\n    function unlockAll(\n        IHegicOperationalTreasury pool,\n        uint256[] calldata optionIDs\n    ) external {\n        uint256 arrayLength = optionIDs.length;\n        for (uint256 i = 0; i < arrayLength; i++) {\n            pool.unlock(optionIDs[i]);\n        }\n    }\n}\n"
    },
    "contracts/Pool/HegicCouponPool.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity ^0.8.6;\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"../Interfaces/Interfaces.sol\";\nimport \"hardhat/console.sol\";\n\ncontract HegicCouponPool is AccessControl, IERC721Receiver {\n    using SafeERC20 for IERC20;\n    IERC20 immutable USDC;\n\n    uint256 constant AUCTION_DURATION = 3 days;\n    uint256 constant SUBSCRIPTION_DURATION = 30 days;\n    address public undistributedCouponRecipient;\n    Coupon[] public coupons;\n    address[] public poolsAvailable;\n    mapping(IHegicPool => bool) isHegicPool;\n\n    event Provided(\n        uint256 indexed couponID,\n        address indexed account,\n        uint256 amount\n    );\n\n    event SubscriptionClosed(uint256 indexed couponID);\n    event Claimed(\n        uint256 indexed couponID,\n        address indexed liquidityProvider,\n        uint256 amount\n    );\n    event Withdrawn(\n        uint256 indexed couponID,\n        address indexed liquidityProvider,\n        uint128 amount,\n        uint128 coupon\n    );\n\n    enum CouponState {Invalid, LiveAuction, Close}\n\n    struct ProvidedLiquidity {\n        uint248 amount;\n        bool hasUnclaimedCoupon;\n    }\n\n    struct Coupon {\n        CouponState state;\n        uint256 start;\n        uint256 amount;\n        uint256 coupon;\n        uint256 deposited;\n        mapping(address => ProvidedLiquidity) provided;\n    }\n\n    constructor(IERC20 USDC_, IHegicPool[] memory hegicPools) {\n        USDC = USDC_;\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        undistributedCouponRecipient = msg.sender;\n        for (uint8 i; i < hegicPools.length; i++)\n            isHegicPool[hegicPools[i]] = true;\n    }\n\n    function initNewCoupon(\n        uint256 start,\n        uint256 amount,\n        uint256 coupon\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        uint256 couponID = coupons.length;\n        coupons.push();\n        coupons[couponID].state = CouponState.LiveAuction;\n        coupons[couponID].start = start;\n        coupons[couponID].amount = amount;\n        coupons[couponID].coupon = coupon;\n\n        USDC.safeTransferFrom(msg.sender, address(this), coupon);\n    }\n\n    function _closeSubscription(uint256 couponID) internal {\n        Coupon storage c = coupons[couponID];\n        require(\n            c.state == CouponState.LiveAuction,\n            \"Error: Coupon auction isn't live\"\n        );\n        c.state = CouponState.Close;\n        uint256 auctionStart = c.start - AUCTION_DURATION;\n        uint256 duration = block.timestamp - auctionStart;\n        if (duration > AUCTION_DURATION) duration = AUCTION_DURATION;\n        uint256 needCoupon =\n            (c.coupon * duration * c.deposited) / AUCTION_DURATION / c.amount;\n        if (c.coupon > needCoupon) {\n            USDC.safeTransfer(\n                undistributedCouponRecipient,\n                c.coupon - needCoupon\n            );\n            c.coupon = needCoupon;\n        }\n\n        emit SubscriptionClosed(couponID);\n    }\n\n    function _sendCoupon(uint256 couponID, address liquidityProvider) internal {\n        Coupon storage c = coupons[couponID];\n        require(c.start < block.timestamp, \"Error: Coupon auction isn't live\");\n        require(\n            c.provided[liquidityProvider].hasUnclaimedCoupon,\n            \"Error: Haven't participated in the coupon auction\"\n        );\n        c.provided[liquidityProvider].hasUnclaimedCoupon = false;\n        uint256 amount = c.provided[liquidityProvider].amount;\n        uint256 couponShare = (c.coupon * amount) / c.deposited;\n        USDC.transfer(liquidityProvider, couponShare);\n        emit Claimed(couponID, liquidityProvider, couponShare);\n    }\n\n    function provideLiquidity(uint256 couponID, uint248 amount) external {\n        Coupon storage c = coupons[couponID];\n        require(block.timestamp < c.start, \"Error: Coupon auction isn't live\");\n        require(\n            c.state == CouponState.LiveAuction,\n            \"Error: Coupon auction isn't live\"\n        );\n        require(c.amount - c.deposited >= amount, \"Error: Incorrect amount\");\n        c.provided[msg.sender].amount += amount;\n        c.provided[msg.sender].hasUnclaimedCoupon = true;\n        c.deposited += amount;\n        USDC.safeTransferFrom(msg.sender, address(this), amount);\n        if (c.deposited == c.amount) _closeSubscription(couponID);\n        emit Provided(couponID, msg.sender, amount);\n    }\n\n    function withdrawLiquidity(uint256 couponID, address liquidityProvider)\n        external\n    {\n        Coupon storage c = coupons[couponID];\n        uint256 amount = c.provided[liquidityProvider].amount;\n\n        require(\n            c.start + SUBSCRIPTION_DURATION < block.timestamp,\n            \"Error: Coupon auction isn't live\"\n        );\n        require(amount != 0, \"Error: Incorrect amount\");\n\n        uint256 couponShare = 0;\n        if (c.provided[liquidityProvider].hasUnclaimedCoupon)\n            couponShare = (c.coupon * amount) / c.deposited;\n        delete c.provided[liquidityProvider];\n        USDC.safeTransfer(liquidityProvider, amount + couponShare);\n        emit Withdrawn(\n            couponID,\n            liquidityProvider,\n            uint128(amount),\n            uint128(couponShare)\n        );\n    }\n\n    function sendLiquidityToPool(IHegicPool pool, uint256 amount)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        if (USDC.allowance(address(this), address(pool)) < amount)\n            USDC.approve(address(pool), type(uint256).max);\n        pool.provideFrom(address(this), amount, false, 0);\n    }\n\n    function closeTranche(IHegicPool pool, uint256 trancheID)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        (, , uint256 provided, , ) = pool.tranches(trancheID);\n        uint256 withdrawn = pool.withdraw(trancheID);\n        if (withdrawn > provided)\n            USDC.safeTransfer(\n                undistributedCouponRecipient,\n                withdrawn - provided\n            );\n        if (withdrawn < provided)\n            USDC.safeTransferFrom(\n                msg.sender,\n                address(this),\n                provided - withdrawn\n            );\n    }\n\n    function closeSubscription(uint256 couponID) external {\n        Coupon storage c = coupons[couponID];\n        require(c.start < block.timestamp, \"Error: 7...\");\n        _closeSubscription(couponID);\n    }\n\n    function buyoutTranche(IHegicPool pool, uint256 trancheID)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        (, , uint256 provided, , ) = pool.tranches(trancheID);\n        pool.safeTransferFrom(address(this), msg.sender, trancheID);\n        USDC.safeTransferFrom(msg.sender, address(this), provided);\n    }\n\n    function claim(uint256 couponID, address liquidityProvider) external {\n        _sendCoupon(couponID, liquidityProvider);\n    }\n\n    function provided(uint256 couponID, address liquidityProvider)\n        external\n        view\n        returns (uint256 provided, bool hasCoupon)\n    {\n        provided = coupons[couponID].provided[liquidityProvider].amount;\n        hasCoupon = coupons[couponID].provided[liquidityProvider]\n            .hasUnclaimedCoupon;\n    }\n\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        return IERC721Receiver.onERC721Received.selector;\n    }\n}\n"
    },
    "contracts/GradualTokenSwap/GradualTokenSwap.sol": {
      "content": "pragma solidity 0.8.6;\n// SPDX-License-Identifier: GPL-3.0-or-later\nimport \"../utils/ERC20Recovery.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\n/**\n * @title GTS\n * @dev A token swap contract that gradually releases tokens on its balance\n */\ncontract GradualTokenSwap is ERC20Recovery {\n    // solhint-disable not-rely-on-time\n    using SafeERC20 for IERC20;\n\n    event Withdrawn(address account, uint256 amount);\n\n    // Durations and timestamps in UNIX time, also in block.timestamp.\n    uint256 public immutable start;\n    uint256 public immutable duration;\n    IERC20 public immutable rHEGIC;\n    IERC20 public immutable HEGIC;\n\n    mapping(address => uint256) public released;\n    mapping(address => uint256) public provided;\n\n    /**\n     * @dev Creates a contract that can be used for swapping rHEGIC into HEGIC\n     * @param _start UNIX time at which the unlock period starts\n     * @param _duration Duration in seconds for unlocking tokens\n     */\n    constructor(\n        uint256 _start,\n        uint256 _duration,\n        IERC20 _rHEGIC,\n        IERC20 _HEGIC\n    ) {\n        if (_start == 0) _start = block.timestamp;\n        require(_duration > 0, \"GTS: duration is 0\");\n\n        duration = _duration;\n        start = _start;\n        rHEGIC = _rHEGIC;\n        HEGIC = _HEGIC;\n    }\n\n    /**\n     * @dev Provide rHEGIC tokens to the contract for later exchange\n     */\n    function provide(uint256 amount) external {\n        rHEGIC.safeTransferFrom(msg.sender, address(this), amount);\n        provided[msg.sender] += amount;\n    }\n\n    /**\n     * @dev Withdraw unlocked user's HEGIC tokens\n     */\n    function withdraw() external {\n        uint256 amount = available(msg.sender);\n        require(amount > 0, \"GTS: You are have not unlocked tokens yet\");\n        released[msg.sender] += amount;\n        HEGIC.safeTransfer(msg.sender, amount);\n        emit Withdrawn(msg.sender, amount);\n    }\n\n    /**\n     * @dev Calculates the amount of tokens that has already been unlocked but hasn't been swapped yet\n     */\n    function available(address account) public view returns (uint256) {\n        return unlocked(account) - released[account];\n    }\n\n    /**\n     * @dev Calculates the total amount of tokens that has already been unlocked\n     */\n    function unlocked(address account) public view returns (uint256) {\n        if (block.timestamp < start) return 0;\n        if (block.timestamp >= start + duration) {\n            return provided[account];\n        } else {\n            return (provided[account] * (block.timestamp - start)) / duration;\n        }\n    }\n}\n"
    },
    "contracts/BondingCurve/Erc20BondingCurve.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./Linear.sol\";\nimport \"./IBondingCurve.sol\";\n\ncontract Erc20BondingCurve is LinearBondingCurve {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable saleToken;\n    IERC20 public immutable purchaseToken;\n    uint256 public soldAmount;\n    uint256 public comissionShare = 20;\n    address payable public hegicDevelopmentFund;\n\n    event Bought(address indexed account, uint256 amount, uint256 ethAmount);\n    event Sold(\n        address indexed account,\n        uint256 amount,\n        uint256 ethAmount,\n        uint256 comission\n    );\n\n    constructor(\n        IERC20 _saleToken,\n        IERC20 _purchaseToken,\n        uint256 k,\n        uint256 startPrice\n    ) LinearBondingCurve(k, startPrice) {\n        saleToken = _saleToken;\n        purchaseToken = _purchaseToken;\n        hegicDevelopmentFund = payable(msg.sender);\n        _setupRole(LBC_ADMIN_ROLE, msg.sender);\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n    }\n\n    function buy(uint256 tokenAmount) external {\n        uint256 nextSold = soldAmount + tokenAmount;\n        uint256 purchaseAmount = s(soldAmount, nextSold);\n        soldAmount = nextSold;\n\n        purchaseToken.safeTransferFrom(\n            msg.sender,\n            address(this),\n            purchaseAmount\n        );\n        saleToken.safeTransfer(msg.sender, tokenAmount);\n\n        emit Bought(msg.sender, tokenAmount, purchaseAmount);\n    }\n\n    function sell(uint256 tokenAmount) external {\n        uint256 nextSold = soldAmount - tokenAmount;\n        uint256 saleAmount = s(nextSold, soldAmount);\n        uint256 comission = (saleAmount * comissionShare) / 100;\n        uint256 refund = saleAmount - comission;\n        require(comission > 0, \"Amount is too small\");\n        soldAmount = nextSold;\n\n        saleToken.safeTransferFrom(msg.sender, address(this), tokenAmount);\n        purchaseToken.safeTransfer(hegicDevelopmentFund, comission);\n        purchaseToken.safeTransfer(msg.sender, refund);\n\n        emit Sold(msg.sender, tokenAmount, refund, comission);\n    }\n\n    function setHDF(address payable value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        hegicDevelopmentFund = value;\n    }\n\n    function setCommissionShare(uint256 value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        comissionShare = value;\n    }\n\n    function destruct() external onlyRole(DEFAULT_ADMIN_ROLE) {\n        selfdestruct(hegicDevelopmentFund);\n    }\n\n    function withdawERC20(IERC20 token) external onlyRole(DEFAULT_ADMIN_ROLE) {\n        token.transfer(hegicDevelopmentFund, token.balanceOf(address(this)));\n    }\n}\n"
    },
    "contracts/Pool/HegicPool.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../OptionsManager/IOptionsManager.sol\";\nimport \"../Interfaces/Interfaces.sol\";\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Main Pool Contract\n * @notice One of the main contracts that manages the pools and the options parameters,\n * accumulates the funds from the liquidity providers and makes the withdrawals for them,\n * sells the options contracts to the options buyers and collateralizes them,\n * exercises the ITM (in-the-money) options with the unrealized P&L and settles them,\n * unlocks the expired options and distributes the premiums among the liquidity providers.\n **/\nabstract contract HegicPool is\n    IHegicPool,\n    ERC721,\n    AccessControl,\n    ReentrancyGuard\n{\n    using SafeERC20 for IERC20;\n\n    uint256 public constant INITIAL_RATE = 1e20;\n    IOptionsManager public immutable optionsManager;\n    AggregatorV3Interface public immutable override priceProvider;\n    IPriceCalculator public override pricer;\n    uint256 public lockupPeriodForHedgedTranches = 60 days;\n    uint256 public lockupPeriodForUnhedgedTranches = 30 days;\n    uint256 public hedgeFeeRate = 80;\n    uint256 public maxUtilizationRate = 80;\n    uint256 public override collateralizationRatio = 50;\n    uint256 public override lockedAmount;\n    uint256 public maxDepositAmount = type(uint256).max;\n    uint256 public maxHedgedDepositAmount = type(uint256).max;\n\n    uint256 public unhedgedShare = 0;\n    uint256 public hedgedShare = 0;\n    uint256 public override unhedgedBalance = 0;\n    uint256 public override hedgedBalance = 0;\n    ISettlementFeeRecipient public settlementFeeRecipient;\n    address public hedgePool;\n\n    Tranche[] public override tranches;\n    mapping(uint256 => Option) public override options;\n    IERC20 public override token;\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        ISettlementFeeRecipient _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider\n    ) ERC721(name, symbol) {\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n        priceProvider = _priceProvider;\n        settlementFeeRecipient = _settlementFeeRecipient;\n        pricer = _pricer;\n        token = _token;\n        hedgePool = _msgSender();\n        optionsManager = manager;\n    }\n\n    /**\n     * @notice Used for setting the liquidity lock-up periods during which\n     * the liquidity providers who deposited the funds into the pools contracts\n     * won't be able to withdraw them. Note that different lock-ups could\n     * be set for the hedged and unhedged — classic — liquidity tranches.\n     * @param hedgedValue Hedged liquidity tranches lock-up in seconds\n     * @param unhedgedValue Unhedged (classic) liquidity tranches lock-up in seconds\n     **/\n    function setLockupPeriod(uint256 hedgedValue, uint256 unhedgedValue)\n        external\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            hedgedValue <= 60 days,\n            \"The lockup period for hedged tranches is too long\"\n        );\n        require(\n            unhedgedValue <= 30 days,\n            \"The lockup period for unhedged tranches is too long\"\n        );\n        lockupPeriodForHedgedTranches = hedgedValue;\n        lockupPeriodForUnhedgedTranches = unhedgedValue;\n    }\n\n    /**\n     * @notice Used for setting the total maximum amount\n     * that could be deposited into the pools contracts.\n     * Note that different total maximum amounts could be set\n     * for the hedged and unhedged — classic — liquidity tranches.\n     * @param total Maximum amount of assets in the pool\n     * in hedged and unhedged (classic) liquidity tranches combined\n     * @param hedged Maximum amount of assets in the pool\n     * in hedged liquidity tranches only\n     **/\n    function setMaxDepositAmount(uint256 total, uint256 hedged)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            total >= hedged,\n            \"Pool Error: The total amount shouldn't be lower than the hedged amount\"\n        );\n        maxDepositAmount = total;\n        maxHedgedDepositAmount = hedged;\n    }\n\n    /**\n     * @notice Used for setting the maximum share of the pool\n     * size that could be utilized as a collateral in the options.\n     *\n     * Example: if `MaxUtilizationRate` = 50, then only 50%\n     * of liquidity on the pools contracts would be used for\n     * collateralizing options while 50% will be sitting idle\n     * available for withdrawals by the liquidity providers.\n     * @param value The utilization ratio in a range of 50% — 100%\n     **/\n    function setMaxUtilizationRate(uint256 value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            50 <= value && value <= 100,\n            \"Pool error: Wrong utilization rate limitation value\"\n        );\n        maxUtilizationRate = value;\n    }\n\n    /**\n     * @notice Used for setting the collateralization ratio for the option\n     * collateral size that will be locked at the moment of buying them.\n     *\n     * Example: if `CollateralizationRatio` = 50, then 50% of an option's\n     * notional size will be locked in the pools at the moment of buying it:\n     * say, 1 ETH call option will be collateralized with 0.5 ETH (50%).\n     * Note that if an option holder's net P&L USD value (as options\n     * are cash-settled) will exceed the amount of the collateral locked\n     * in the option, she will receive the required amount at the moment\n     * of exercising the option using the pool's unutilized (unlocked) funds.\n     * @param value The collateralization ratio in a range of 30% — 100%\n     **/\n    function setCollateralizationRatio(uint256 value)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(\n            30 <= value && value <= 100,\n            \"Pool Error: Wrong collateralization ratio value\"\n        );\n        collateralizationRatio = value;\n    }\n\n    /**\n     * @dev See EIP-165: ERC-165 Standard Interface Detection\n     * https://eips.ethereum.org/EIPS/eip-165.\n     **/\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        virtual\n        override(ERC721, AccessControl, IERC165)\n        returns (bool)\n    {\n        return\n            interfaceId == type(IHegicPool).interfaceId ||\n            AccessControl.supportsInterface(interfaceId) ||\n            ERC721.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @notice Used for changing the hedging pool address\n     * that will be accumulating the hedging premiums paid\n     * as a share of the total premium redirected to this address.\n     * @param value The address for receiving hedging premiums\n     **/\n    function setHedgePool(address value)\n        external\n        override\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(value != address(0));\n        hedgePool = value;\n    }\n\n    /**\n     * @notice Used for selling the options contracts\n     * with the parameters chosen by the option buyer\n     * such as the period of holding, option size (amount),\n     * strike price and the premium to be paid for the option.\n     * @param holder The option buyer address\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     * @return id ID of ERC721 token linked to the option\n     **/\n    function sellOption(\n        address holder,\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external override returns (uint256 id) {\n        if (strike == 0) strike = _currentPrice();\n        uint256 balance = totalBalance();\n        uint256 amountToBeLocked = _calculateLockedAmount(amount);\n\n        require(period >= 1 days, \"Pool Error: The period is too short\");\n        require(period <= 90 days, \"Pool Error: The period is too long\");\n        require(\n            (lockedAmount + amountToBeLocked) * 100 <=\n                balance * maxUtilizationRate,\n            \"Pool Error: The amount is too large\"\n        );\n\n        (uint256 settlementFee, uint256 premium) =\n            _calculateTotalPremium(period, amount, strike);\n        uint256 hedgedPremiumTotal = (premium * hedgedBalance) / balance;\n        uint256 hedgeFee = (hedgedPremiumTotal * hedgeFeeRate) / 100;\n        uint256 hedgePremium = hedgedPremiumTotal - hedgeFee;\n        uint256 unhedgePremium = premium - hedgedPremiumTotal;\n\n        lockedAmount += amountToBeLocked;\n        id = optionsManager.createOptionFor(holder);\n        options[id] = Option(\n            OptionState.Active,\n            strike,\n            amount,\n            amountToBeLocked,\n            block.timestamp + period,\n            hedgePremium,\n            unhedgePremium\n        );\n\n        token.safeTransferFrom(\n            _msgSender(),\n            address(this),\n            premium + settlementFee\n        );\n        token.safeTransfer(address(settlementFeeRecipient), settlementFee);\n        settlementFeeRecipient.distributeUnrealizedRewards();\n        if (hedgeFee > 0) token.safeTransfer(hedgePool, hedgeFee);\n        emit Acquired(id, settlementFee, premium);\n    }\n\n    /**\n     * @notice Used for setting the price calculator\n     * contract that will be used for pricing the options.\n     * @param pc A new price calculator contract address\n     **/\n    function setPriceCalculator(IPriceCalculator pc)\n        public\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        pricer = pc;\n    }\n\n    /**\n     * @notice Used for exercising the ITM (in-the-money)\n     * options contracts in case of having the unrealized profits\n     * accrued during the period of holding the option contract.\n     * @param id ID of ERC721 token linked to the option\n     **/\n    function exercise(uint256 id) external override {\n        Option storage option = options[id];\n        uint256 profit = _profitOf(option);\n        require(\n            optionsManager.isApprovedOrOwner(_msgSender(), id),\n            \"Pool Error: msg.sender can't exercise this option\"\n        );\n        require(\n            option.expired > block.timestamp,\n            \"Pool Error: The option has already expired\"\n        );\n        require(\n            profit > 0,\n            \"Pool Error: There are no unrealized profits for this option\"\n        );\n        _unlock(option);\n        option.state = OptionState.Exercised;\n        _send(optionsManager.ownerOf(id), profit);\n        emit Exercised(id, profit);\n    }\n\n    function _send(address to, uint256 transferAmount) private {\n        require(to != address(0));\n        uint256 hedgeLoss = (transferAmount * hedgedBalance) / totalBalance();\n        uint256 unhedgeLoss = transferAmount - hedgeLoss;\n        hedgedBalance -= hedgeLoss;\n        unhedgedBalance -= unhedgeLoss;\n        token.safeTransfer(to, transferAmount);\n    }\n\n    /**\n     * @notice Used for unlocking the expired OTM (out-of-the-money)\n     * options contracts in case if there was no unrealized P&L\n     * accrued during the period of holding a particular option.\n     * Note that the `unlock` function releases the liquidity that\n     * was locked in the option when it was active and the premiums\n     * that are distributed pro rata among the liquidity providers.\n     * @param id ID of ERC721 token linked to the option\n     **/\n    function unlock(uint256 id) external override {\n        Option storage option = options[id];\n        require(\n            option.expired < block.timestamp,\n            \"Pool Error: The option has not expired yet\"\n        );\n        _unlock(option);\n        option.state = OptionState.Expired;\n        emit Expired(id);\n    }\n\n    function _unlock(Option storage option) internal {\n        require(\n            option.state == OptionState.Active,\n            \"Pool Error: The option with such an ID has already been exercised or expired\"\n        );\n        lockedAmount -= option.lockedAmount;\n        hedgedBalance += option.hedgePremium;\n        unhedgedBalance += option.unhedgePremium;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        return (amount * collateralizationRatio) / 100;\n    }\n\n    /**\n     * @notice Used for depositing the funds into the pool\n     * and minting the liquidity tranche ERC721 token\n     * which represents the liquidity provider's share\n     * in the pool and her unrealized P&L for this tranche.\n     * @param account The liquidity provider's address\n     * @param amount The size of the liquidity tranche\n     * @param hedged The type of the liquidity tranche\n     * @param minShare The minimum share in the pool for the user\n     **/\n    function provideFrom(\n        address account,\n        uint256 amount,\n        bool hedged,\n        uint256 minShare\n    ) external override nonReentrant returns (uint256 share) {\n        uint256 totalShare = hedged ? hedgedShare : unhedgedShare;\n        uint256 balance = hedged ? hedgedBalance : unhedgedBalance;\n        share = totalShare > 0 && balance > 0\n            ? (amount * totalShare) / balance\n            : amount * INITIAL_RATE;\n        uint256 limit =\n            hedged\n                ? maxHedgedDepositAmount - hedgedBalance\n                : maxDepositAmount - hedgedBalance - unhedgedBalance;\n        require(share >= minShare, \"Pool Error: The mint limit is too large\");\n        require(share > 0, \"Pool Error: The amount is too small\");\n        require(\n            amount <= limit,\n            \"Pool Error: Depositing into the pool is not available\"\n        );\n\n        if (hedged) {\n            hedgedShare += share;\n            hedgedBalance += amount;\n        } else {\n            unhedgedShare += share;\n            unhedgedBalance += amount;\n        }\n\n        uint256 trancheID = tranches.length;\n        tranches.push(\n            Tranche(TrancheState.Open, share, amount, block.timestamp, hedged)\n        );\n        _safeMint(account, trancheID);\n        token.safeTransferFrom(_msgSender(), address(this), amount);\n    }\n\n    /**\n     * @notice Used for withdrawing the funds from the pool\n     * plus the net positive P&L earned or\n     * minus the net negative P&L lost on\n     * providing liquidity and selling options.\n     * @param trancheID The liquidity tranche ID\n     * @return amount The amount received after the withdrawal\n     **/\n    function withdraw(uint256 trancheID)\n        external\n        override\n        nonReentrant\n        returns (uint256 amount)\n    {\n        address owner = ownerOf(trancheID);\n        Tranche memory t = tranches[trancheID];\n        amount = _withdraw(owner, trancheID);\n        if (t.hedged && amount < t.amount) {\n            token.safeTransferFrom(hedgePool, owner, t.amount - amount);\n            amount = t.amount;\n        }\n        emit Withdrawn(owner, trancheID, amount);\n    }\n\n    /**\n     * @notice Used for withdrawing the funds from the pool\n     * by the hedged liquidity tranches providers\n     * in case of an urgent need to withdraw the liquidity\n     * without receiving the loss compensation from\n     * the hedging pool: the net difference between\n     * the amount deposited and the withdrawal amount.\n     * @param trancheID ID of liquidity tranche\n     * @return amount The amount received after the withdrawal\n     **/\n    function withdrawWithoutHedge(uint256 trancheID)\n        external\n        override\n        nonReentrant\n        returns (uint256 amount)\n    {\n        address owner = ownerOf(trancheID);\n        amount = _withdraw(owner, trancheID);\n        emit Withdrawn(owner, trancheID, amount);\n    }\n\n    function _withdraw(address owner, uint256 trancheID)\n        internal\n        returns (uint256 amount)\n    {\n        Tranche storage t = tranches[trancheID];\n        uint256 lockupPeriod =\n            t.hedged\n                ? lockupPeriodForHedgedTranches\n                : lockupPeriodForUnhedgedTranches;\n        require(t.state == TrancheState.Open);\n        require(_isApprovedOrOwner(_msgSender(), trancheID));\n        require(\n            block.timestamp > t.creationTimestamp + lockupPeriod,\n            \"Pool Error: The withdrawal is locked up\"\n        );\n\n        t.state = TrancheState.Closed;\n        if (t.hedged) {\n            amount = (t.share * hedgedBalance) / hedgedShare;\n            hedgedShare -= t.share;\n            hedgedBalance -= amount;\n        } else {\n            amount = (t.share * unhedgedBalance) / unhedgedShare;\n            unhedgedShare -= t.share;\n            unhedgedBalance -= amount;\n        }\n\n        token.safeTransfer(owner, amount);\n    }\n\n    /**\n     * @return balance Returns the amount of liquidity available for withdrawing\n     **/\n    function availableBalance() public view returns (uint256 balance) {\n        return totalBalance() - lockedAmount;\n    }\n\n    /**\n     * @return balance Returns the total balance of liquidity provided to the pool\n     **/\n    function totalBalance() public view override returns (uint256 balance) {\n        return hedgedBalance + unhedgedBalance;\n    }\n\n    function _beforeTokenTransfer(\n        address,\n        address,\n        uint256 id\n    ) internal view override {\n        require(\n            tranches[id].state == TrancheState.Open,\n            \"Pool Error: The closed tranches can not be transferred\"\n        );\n    }\n\n    /**\n     * @notice Returns the amount of unrealized P&L of the option\n     * that could be received by the option holder in case\n     * if she exercises it as an ITM (in-the-money) option.\n     * @param id ID of ERC721 token linked to the option\n     **/\n    function profitOf(uint256 id) external view returns (uint256) {\n        return _profitOf(options[id]);\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        virtual\n        returns (uint256 amount);\n\n    /**\n     * @notice Used for calculating the `TotalPremium`\n     * for the particular option with regards to\n     * the parameters chosen by the option buyer\n     * such as the period of holding, size (amount)\n     * and strike price.\n     * @param period The period of holding the option\n     * @param period The size of the option\n     **/\n    function calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) external view override returns (uint256 settlementFee, uint256 premium) {\n        return _calculateTotalPremium(period, amount, strike);\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view virtual returns (uint256 settlementFee, uint256 premium) {\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        require(\n            settlementFee + premium > amount / 100000,\n            \"HegicPool: The option's price is too low\"\n        );\n    }\n\n    /**\n     * @notice Used for changing the `settlementFeeRecipient`\n     * contract address for distributing the settlement fees\n     * (staking rewards) among the staking participants.\n     * @param recipient New staking contract address\n     **/\n    function setSettlementFeeRecipient(IHegicStaking recipient)\n        external\n        onlyRole(DEFAULT_ADMIN_ROLE)\n    {\n        require(address(recipient) != address(0));\n        settlementFeeRecipient = recipient;\n    }\n\n    function _currentPrice() internal view returns (uint256 price) {\n        (, int256 latestPrice, , , ) = priceProvider.latestRoundData();\n        price = uint256(latestPrice);\n    }\n}\n"
    },
    "contracts/Pool/HegicStrip.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicSTRIP is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) {\n            return _profitOfCall(option);\n        } else if (currentPrice < option.strike) {\n            return _profitOfPut(option);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) return 0;\n        return\n            ((option.strike - currentPrice) *\n                (2 * option.amount) *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice < option.strike) return 0;\n        return\n            ((currentPrice - option.strike) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee =\n            (settlementFee * currentPrice * TokenDecimals) /\n            1e8 /\n            SpotDecimals;\n        premium = (premium * currentPrice * TokenDecimals) / 1e8 / SpotDecimals;\n    }\n}\n"
    },
    "contracts/Pool/HegicStrap.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicSTRAP is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) {\n            return _profitOfCall(option);\n        } else if (currentPrice < option.strike) {\n            return _profitOfPut(option);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) return 0;\n        return\n            ((option.strike - currentPrice) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice < option.strike) return 0;\n        return\n            ((currentPrice - option.strike) *\n                (2 * option.amount) *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee =\n            (settlementFee * currentPrice * TokenDecimals) /\n            1e8 /\n            SpotDecimals;\n        premium = (premium * currentPrice * TokenDecimals) / 1e8 / SpotDecimals;\n    }\n}\n"
    },
    "contracts/Pool/HegicStraddle.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicSTRADDLE is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) {\n            return _profitOfCall(option);\n        } else if (currentPrice < option.strike) {\n            return _profitOfPut(option);\n        }\n        return 0;\n    }\n\n    function _profitOfPut(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((option.strike - currentPrice) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _profitOfCall(Option memory option)\n        internal\n        view\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        return\n            ((currentPrice - option.strike) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee =\n            (settlementFee * currentPrice * TokenDecimals) /\n            1e8 /\n            SpotDecimals;\n        premium = (premium * currentPrice * TokenDecimals) / 1e8 / SpotDecimals;\n    }\n}\n"
    },
    "contracts/Pool/HegicPut.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicPUT is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) return 0;\n        return\n            ((option.strike - currentPrice) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee =\n            (settlementFee * currentPrice * TokenDecimals) /\n            1e8 /\n            SpotDecimals;\n        premium = (premium * currentPrice * TokenDecimals) / 1e8 / SpotDecimals;\n    }\n}\n"
    },
    "contracts/Pool/HegicOtmPut.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicOTMPut is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice > option.strike) return 0;\n        return\n            ((option.strike - currentPrice) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee = settlementFee / 1e12;\n        premium = premium / 1e12;\n    }\n}\n"
    },
    "contracts/Pool/HegicOtmCall.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Put Liquidity Pool Contract\n * @notice The Put Liquidity Pool Contract\n **/\n\ncontract HegicOTMCall is HegicPool {\n    uint256 private immutable SpotDecimals; // 1e18\n    uint256 private constant TokenDecimals = 1e6; // 1e6\n\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider,\n        uint8 spotDecimals\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice < option.strike) return 0;\n        return\n            ((currentPrice - option.strike) * option.amount * TokenDecimals) /\n            SpotDecimals /\n            1e8;\n    }\n\n    function _calculateLockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                collateralizationRatio *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n\n    function _calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 currentPrice = _currentPrice();\n        (settlementFee, premium) = pricer.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        settlementFee = settlementFee / 1e12;\n        premium = premium / 1e12;\n    }\n}\n"
    },
    "contracts/Pool/HegicCall.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./HegicPool.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Call Liquidity Pool Contract\n * @notice The Call Liquidity Pool Contract\n **/\ncontract HegicCALL is HegicPool {\n    /**\n     * @param name The pool contract name\n     * @param symbol The pool ticker for the ERC721 options\n     **/\n    constructor(\n        IERC20 _token,\n        string memory name,\n        string memory symbol,\n        IOptionsManager manager,\n        IPriceCalculator _pricer,\n        IHegicStaking _settlementFeeRecipient,\n        AggregatorV3Interface _priceProvider\n    )\n        HegicPool(\n            _token,\n            name,\n            symbol,\n            manager,\n            _pricer,\n            _settlementFeeRecipient,\n            _priceProvider\n        )\n    {}\n\n    function _profitOf(Option memory option)\n        internal\n        view\n        override\n        returns (uint256 amount)\n    {\n        uint256 currentPrice = _currentPrice();\n        if (currentPrice < option.strike) return 0;\n        return ((currentPrice - option.strike) * option.amount) / currentPrice;\n    }\n}\n"
    },
    "contracts/synthetix/SafeDecimalMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//\n//Copyright (c) 2019 Synthetix\n//\n//Permission is hereby granted, free of charge, to any person obtaining a copy\n//of this software and associated documentation files (the \"Software\"), to deal\n//in the Software without restriction, including without limitation the rights\n//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//copies of the Software, and to permit persons to whom the Software is\n//furnished to do so, subject to the following conditions:\n//\n//The above copyright notice and this permission notice shall be included in all\n//copies or substantial portions of the Software.\n//\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//SOFTWARE.\n\npragma solidity ^0.8.6;\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/SafeDecimalMath/\nlibrary SafeDecimalMath {\n    using SafeMath for uint256;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    uint256 public constant UNIT = 10**uint256(decimals);\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    uint256 public constant PRECISE_UNIT = 10**uint256(highPrecisionDecimals);\n    uint256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        10**uint256(highPrecisionDecimals - decimals);\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (uint256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (uint256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        uint256 x,\n        uint256 y,\n        uint256 precisionUnit\n    ) private pure returns (uint256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        uint256 x,\n        uint256 y,\n        uint256 precisionUnit\n    ) private pure returns (uint256) {\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(uint256 x, uint256 y)\n        internal\n        pure\n        returns (uint256)\n    {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(uint256 i)\n        internal\n        pure\n        returns (uint256)\n    {\n        uint256 quotientTimesTen =\n            i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n"
    },
    "contracts/PriceCalculators/BlackScholes.sol": {
      "content": "//SPDX-License-Identifier: ISC\npragma solidity 0.8.6;\npragma experimental ABIEncoderV2;\n\n// Libraries\nimport \"../synthetix/SignedSafeDecimalMath.sol\";\nimport \"../synthetix/SafeDecimalMath.sol\";\nimport \"../Interfaces/IBlackScholes.sol\";\n\n/**\n * @title BlackScholes\n * @author Lyra\n * @dev Contract to compute the black scholes price of options. Where the unit is unspecified, it should be treated as a\n * PRECISE_DECIMAL, which has 1e27 units of precision. The default decimal matches the ethereum standard of 1e18 units\n * of precision.\n */\ncontract BlackScholes is IBlackScholes {\n    using SafeMath for uint256;\n    using SafeDecimalMath for uint256;\n    using SignedSafeMath for int256;\n    using SignedSafeDecimalMath for int256;\n\n    uint256 private constant SECONDS_PER_YEAR = 31536000;\n    /// @dev Internally this library uses 27 decimals of precision\n    uint256 private constant PRECISE_UNIT = 1e27;\n    uint256 private constant LN_2_PRECISE = 693147180559945309417232122;\n    uint256 private constant SQRT_TWOPI = 2506628274631000502415765285;\n    /// @dev Below this value, return 0\n    int256 private constant MIN_CDF_STD_DIST_INPUT =\n        (int256(PRECISE_UNIT) * -45) / 10; // -4.5\n    /// @dev Above this value, return 1\n    int256 private constant MAX_CDF_STD_DIST_INPUT = int256(PRECISE_UNIT) * 10;\n    /// @dev Below this value, the result is always 0\n    int256 private constant MIN_EXP = -63 * int256(PRECISE_UNIT);\n    /// @dev Above this value the a lot of precision is lost, and uint256s come close to not being able to handle the size\n    uint256 private constant MAX_EXP = 100 * PRECISE_UNIT;\n    /// @dev Value to use to avoid any division by 0 or values near 0\n    uint256 private constant MIN_T_ANNUALISED = PRECISE_UNIT / SECONDS_PER_YEAR; // 1 second\n    uint256 private constant MIN_VOLATILITY = PRECISE_UNIT / 10000; // 0.001%\n    uint256 private constant VEGA_STANDARDISATION_MIN_DAYS = 7 days;\n\n    /*\n     * Math Operations\n     */\n\n    /**\n     * @dev Returns absolute value of an int as a uint.\n     */\n    function abs(int256 x) public pure override returns (uint256) {\n        return uint256(x < 0 ? -x : x);\n    }\n\n    /**\n     * @dev Returns the floor of a PRECISE_UNIT (x - (x % 1e27))\n     */\n    function floor(uint256 x) internal pure returns (uint256) {\n        return x - (x % PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Returns the natural log of the value using Halley's method.\n     */\n    function ln(uint256 x) internal pure returns (int256) {\n        int256 res;\n        int256 next;\n\n        for (uint256 i = 0; i < 8; i++) {\n            int256 e = int256(exp(res));\n            next = res.add(\n                (int256(x).sub(e).mul(2)).divideDecimalRoundPrecise(\n                    int256(x).add(e)\n                )\n            );\n            if (next == res) {\n                break;\n            }\n            res = next;\n        }\n\n        return res;\n    }\n\n    /**\n     * @dev Returns the exponent of the value using taylor expansion with range reduction.\n     */\n    function exp(uint256 x) public pure override returns (uint256) {\n        if (x == 0) {\n            return PRECISE_UNIT;\n        }\n        require(x <= MAX_EXP, \"cannot handle exponents greater than 100\");\n\n        uint256 k =\n            floor(x.divideDecimalRoundPrecise(LN_2_PRECISE)) / PRECISE_UNIT;\n        uint256 p = 2**k;\n        uint256 r = x.sub(k.mul(LN_2_PRECISE));\n\n        uint256 _T = PRECISE_UNIT;\n\n        uint256 lastT;\n        for (uint8 i = 16; i > 0; i--) {\n            _T = _T.multiplyDecimalRoundPrecise(r / i).add(PRECISE_UNIT);\n            if (_T == lastT) {\n                break;\n            }\n            lastT = _T;\n        }\n\n        return p.mul(_T);\n    }\n\n    /**\n     * @dev Returns the exponent of the value using taylor expansion with range reduction, with support for negative\n     * numbers.\n     */\n    function exp(int256 x) public pure override returns (uint256) {\n        if (0 <= x) {\n            return exp(uint256(x));\n        } else if (x < MIN_EXP) {\n            // exp(-63) < 1e-27, so we just return 0\n            return 0;\n        } else {\n            return PRECISE_UNIT.divideDecimalRoundPrecise(exp(uint256(-x)));\n        }\n    }\n\n    /**\n     * @dev Returns the square root of the value using Newton's method. This ignores the unit, so numbers should be\n     * multiplied by their unit before being passed in.\n     */\n    function sqrt(uint256 x) public pure override returns (uint256 y) {\n        uint256 z = (x.add(1)) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n    /**\n     * @dev Returns the square root of the value using Newton's method.\n     */\n    function sqrtPrecise(uint256 x) internal pure returns (uint256) {\n        // Add in an extra unit factor for the square root to gobble;\n        // otherwise, sqrt(x * UNIT) = sqrt(x) * sqrt(UNIT)\n        return sqrt(x.mul(PRECISE_UNIT));\n    }\n\n    /**\n     * @dev The standard normal distribution of the value.\n     */\n    function stdNormal(int256 x) internal pure returns (uint256) {\n        return\n            exp(-x.multiplyDecimalRoundPrecise(x / 2))\n                .divideDecimalRoundPrecise(SQRT_TWOPI);\n    }\n\n    /*\n     * @dev The standard normal cumulative distribution of the value. Only has to operate precisely between -1 and 1 for\n     * the calculation of option prices, but handles up to -4 with good accuracy.\n     */\n    function stdNormalCDF(int256 x) internal pure returns (uint256) {\n        // Based on testing, errors are ~0.1% at -4, which is still acceptable; and around 0.3% at -4.5.\n        // This function seems to become increasingly inaccurate past -5 ( >%5 inaccuracy)\n        // At that range, the values are so low at that we will return 0, as it won't affect any usage of this value.\n        if (x < MIN_CDF_STD_DIST_INPUT) {\n            return 0;\n        }\n\n        // Past 10, this will always return 1 at the level of precision we are using\n        if (x > MAX_CDF_STD_DIST_INPUT) {\n            return PRECISE_UNIT;\n        }\n\n        int256 t1 = int256(1e7 + int256((2315419 * abs(x)) / PRECISE_UNIT));\n        uint256 exponent = uint256(x.multiplyDecimalRoundPrecise(x / 2));\n        int256 d = int256((3989423 * PRECISE_UNIT) / exp(exponent));\n        uint256 prob =\n            uint256(\n                (d *\n                    (3193815 +\n                        ((-3565638 +\n                            ((17814780 +\n                                ((-18212560 + (13302740 * 1e7) / t1) * 1e7) /\n                                t1) * 1e7) /\n                            t1) * 1e7) /\n                        t1) *\n                    1e7) / t1\n            );\n        if (x > 0) prob = 1e14 - prob;\n        return (PRECISE_UNIT * prob) / 1e14;\n    }\n\n    /**\n     * @dev Converts an integer number of seconds to a fractional number of years.\n     */\n    function annualise(uint256 secs)\n        internal\n        pure\n        returns (uint256 yearFraction)\n    {\n        return secs.divideDecimalRoundPrecise(SECONDS_PER_YEAR);\n    }\n\n    /*\n     * Black Scholes and option prices\n     */\n\n    /**\n     * @dev Returns internal coefficients of the Black-Scholes call price formula, d1 and d2.\n     * @param tAnnualised Number of years to expiry\n     * @param volatility Implied volatility over the period til expiry as a percentage\n     * @param spot The current price of the base asset\n     * @param strike The strike price of the option\n     * @param rate The percentage risk free rate + carry cost\n     */\n    function d1d2(\n        uint256 tAnnualised,\n        uint256 volatility,\n        uint256 spot,\n        uint256 strike,\n        int256 rate\n    ) internal pure returns (int256 d1, int256 d2) {\n        // Set minimum values for tAnnualised and volatility to not break computation in extreme scenarios\n        // These values will result in option prices reflecting only the difference in stock/strike, which is expected.\n        // This should be caught before calling this function, however the function shouldn't break if the values are 0.\n        tAnnualised = tAnnualised < MIN_T_ANNUALISED\n            ? MIN_T_ANNUALISED\n            : tAnnualised;\n        volatility = volatility < MIN_VOLATILITY ? MIN_VOLATILITY : volatility;\n\n        int256 vtSqrt =\n            int256(\n                volatility.multiplyDecimalRoundPrecise(sqrtPrecise(tAnnualised))\n            );\n        int256 log = ln(spot.divideDecimalRoundPrecise(strike));\n        int256 v2t =\n            int256(volatility.multiplyDecimalRoundPrecise(volatility) / 2)\n                .add(rate)\n                .multiplyDecimalRoundPrecise(int256(tAnnualised));\n        d1 = log.add(v2t).divideDecimalRoundPrecise(vtSqrt);\n        d2 = d1.sub(vtSqrt);\n    }\n\n    /**\n     * @dev Internal coefficients of the Black-Scholes call price formula.\n     * @param tAnnualised Number of years to expiry\n     * @param spot The current price of the base asset\n     * @param strike The strike price of the option\n     * @param rate The percentage risk free rate + carry cost\n     * @param d1 Internal coefficient of Black-Scholes\n     * @param d2 Internal coefficient of Black-Scholes\n     */\n    function _optionPrices(\n        uint256 tAnnualised,\n        uint256 spot,\n        uint256 strike,\n        int256 rate,\n        int256 d1,\n        int256 d2\n    ) internal pure returns (uint256 call, uint256 put) {\n        uint256 strikePV =\n            strike.multiplyDecimalRoundPrecise(\n                exp(-rate.multiplyDecimalRoundPrecise(int256(tAnnualised)))\n            );\n        uint256 spotNd1 = spot.multiplyDecimalRoundPrecise(stdNormalCDF(d1));\n        uint256 strikeNd2 =\n            strikePV.multiplyDecimalRoundPrecise(stdNormalCDF(d2));\n\n        // We clamp to zero if the minuend is less than the subtrahend\n        // In some scenarios it may be better to compute put price instead and derive call from it depending on which way\n        // around is more precise.\n        call = strikeNd2 <= spotNd1 ? spotNd1.sub(strikeNd2) : 0;\n        put = call.add(strikePV);\n        put = spot <= put ? put.sub(spot) : 0;\n    }\n\n    /**\n     * @dev Returns call and put prices for options with given parameters.\n     * @param timeToExpirySec Number of seconds to the expiry of the option\n     * @param volatilityDecimal Implied volatility over the period til expiry as a percentage\n     * @param spotDecimal The current price of the base asset\n     * @param strikeDecimal The strike price of the option\n     * @param rateDecimal The percentage risk free rate + carry cost\n     */\n    function optionPrices(\n        uint256 timeToExpirySec,\n        uint256 volatilityDecimal,\n        uint256 spotDecimal,\n        uint256 strikeDecimal,\n        int256 rateDecimal\n    ) external pure override returns (uint256 call, uint256 put) {\n        uint256 tAnnualised = annualise(timeToExpirySec);\n        uint256 spotPrecise = spotDecimal.decimalToPreciseDecimal();\n        uint256 strikePrecise = strikeDecimal.decimalToPreciseDecimal();\n        int256 ratePrecise = rateDecimal.decimalToPreciseDecimal();\n        (int256 d1, int256 d2) =\n            d1d2(\n                tAnnualised,\n                volatilityDecimal.decimalToPreciseDecimal(),\n                spotPrecise,\n                strikePrecise,\n                ratePrecise\n            );\n        (call, put) = _optionPrices(\n            tAnnualised,\n            spotPrecise,\n            strikePrecise,\n            ratePrecise,\n            d1,\n            d2\n        );\n        return (call.preciseDecimalToDecimal(), put.preciseDecimalToDecimal());\n    }\n\n    /*\n     * Greeks\n     */\n\n    /**\n     * @dev Returns the option's delta value\n     * @param d1 Internal coefficient of Black-Scholes\n     */\n    function _delta(int256 d1)\n        internal\n        pure\n        returns (int256 callDelta, int256 putDelta)\n    {\n        callDelta = int256(stdNormalCDF(d1));\n        putDelta = callDelta - int256(PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Returns the option's vega value based on d1\n     *\n     * @param d1 Internal coefficient of Black-Scholes\n     * @param tAnnualised Number of years to expiry\n     * @param spot The current price of the base asset\n     */\n    function _vega(\n        uint256 tAnnualised,\n        uint256 spot,\n        int256 d1\n    ) internal pure returns (uint256 vega) {\n        return\n            sqrtPrecise(tAnnualised).multiplyDecimalRoundPrecise(\n                stdNormal(d1).multiplyDecimalRoundPrecise(spot)\n            );\n    }\n\n    /**\n     * @dev Returns the option's vega value with expiry modified to be at least VEGA_STANDARDISATION_MIN_DAYS\n     * @param d1 Internal coefficient of Black-Scholes\n     * @param spot The current price of the base asset\n     * @param timeToExpirySec Number of seconds to expiry\n     */\n    function _standardVega(\n        int256 d1,\n        uint256 spot,\n        uint256 timeToExpirySec\n    ) internal pure returns (uint256) {\n        uint256 tAnnualised = annualise(timeToExpirySec);\n\n        timeToExpirySec = timeToExpirySec < VEGA_STANDARDISATION_MIN_DAYS\n            ? VEGA_STANDARDISATION_MIN_DAYS\n            : timeToExpirySec;\n        uint256 daysToExpiry = (timeToExpirySec.mul(PRECISE_UNIT)) / 1 days;\n        uint256 thirty = 30 * PRECISE_UNIT;\n        uint256 normalisationFactor =\n            sqrtPrecise(thirty.divideDecimalRoundPrecise(daysToExpiry)).div(\n                100\n            );\n        return\n            _vega(tAnnualised, spot, d1)\n                .multiplyDecimalRoundPrecise(normalisationFactor)\n                .preciseDecimalToDecimal();\n    }\n\n    /**\n     * @dev Returns call/put prices and delta/stdVega for options with given parameters.\n     * @param timeToExpirySec Number of seconds to the expiry of the option\n     * @param volatilityDecimal Implied volatility over the period til expiry as a percentage\n     * @param spotDecimal The current price of the base asset\n     * @param strikeDecimal The strike price of the option\n     * @param rateDecimal The percentage risk free rate + carry cost\n     */\n    function pricesDeltaStdVega(\n        uint256 timeToExpirySec,\n        uint256 volatilityDecimal,\n        uint256 spotDecimal,\n        uint256 strikeDecimal,\n        int256 rateDecimal\n    ) external pure override returns (IBlackScholes.PricesDeltaStdVega memory) {\n        uint256 tAnnualised = annualise(timeToExpirySec);\n        uint256 spotPrecise = spotDecimal.decimalToPreciseDecimal();\n\n        (int256 d1, int256 d2) =\n            d1d2(\n                tAnnualised,\n                volatilityDecimal.decimalToPreciseDecimal(),\n                spotPrecise,\n                strikeDecimal.decimalToPreciseDecimal(),\n                rateDecimal.decimalToPreciseDecimal()\n            );\n        (uint256 callPrice, uint256 putPrice) =\n            _optionPrices(\n                tAnnualised,\n                spotPrecise,\n                strikeDecimal.decimalToPreciseDecimal(),\n                rateDecimal.decimalToPreciseDecimal(),\n                d1,\n                d2\n            );\n        uint256 v = _standardVega(d1, spotPrecise, timeToExpirySec);\n        (int256 callDelta, int256 putDelta) = _delta(d1);\n\n        return\n            IBlackScholes.PricesDeltaStdVega(\n                callPrice.preciseDecimalToDecimal(),\n                putPrice.preciseDecimalToDecimal(),\n                callDelta.preciseDecimalToDecimal(),\n                putDelta.preciseDecimalToDecimal(),\n                v\n            );\n    }\n}\n"
    },
    "contracts/synthetix/SignedSafeDecimalMath.sol": {
      "content": "//SPDX-License-Identifier: MIT\n//MIT License\n//\n//Copyright (c) 2019 Synthetix\n//\n//Permission is hereby granted, free of charge, to any person obtaining a copy\n//of this software and associated documentation files (the \"Software\"), to deal\n//in the Software without restriction, including without limitation the rights\n//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//copies of the Software, and to permit persons to whom the Software is\n//furnished to do so, subject to the following conditions:\n//\n//The above copyright notice and this permission notice shall be included in all\n//copies or substantial portions of the Software.\n//\n//THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n//SOFTWARE.\n\npragma solidity ^0.8.6;\n\n// Libraries\nimport \"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\";\n\n// https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\nlibrary SignedSafeDecimalMath {\n    using SignedSafeMath for int256;\n\n    /* Number of decimal places in the representations. */\n    uint8 public constant decimals = 18;\n    uint8 public constant highPrecisionDecimals = 27;\n\n    /* The number representing 1.0. */\n    int256 public constant UNIT = int256(10**uint256(decimals));\n\n    /* The number representing 1.0 for higher fidelity numbers. */\n    int256 public constant PRECISE_UNIT =\n        int256(10**uint256(highPrecisionDecimals));\n    int256 private constant UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR =\n        int256(10**uint256(highPrecisionDecimals - decimals));\n\n    /**\n     * @return Provides an interface to UNIT.\n     */\n    function unit() external pure returns (int256) {\n        return UNIT;\n    }\n\n    /**\n     * @return Provides an interface to PRECISE_UNIT.\n     */\n    function preciseUnit() external pure returns (int256) {\n        return PRECISE_UNIT;\n    }\n\n    /**\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\n     * decimals.\n     *\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\n     * so that product must be less than 2**256. As this is an integer division,\n     * the internal division always rounds down. This helps save on gas. Rounding\n     * is more expensive on gas.\n     */\n    function multiplyDecimal(int256 x, int256 y)\n        internal\n        pure\n        returns (int256)\n    {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        return x.mul(y) / UNIT;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of the specified precision unit.\n     *\n     * @dev The operands should be in the form of a the specified unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function _multiplyDecimalRound(\n        int256 x,\n        int256 y,\n        int256 precisionUnit\n    ) private pure returns (int256) {\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\n        int256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a precise unit.\n     *\n     * @dev The operands should be in the precise unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRoundPrecise(int256 x, int256 y)\n        internal\n        pure\n        returns (int256)\n    {\n        return _multiplyDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @return The result of safely multiplying x and y, interpreting the operands\n     * as fixed-point decimals of a standard unit.\n     *\n     * @dev The operands should be in the standard unit factor which will be\n     * divided out after the product of x and y is evaluated, so that product must be\n     * less than 2**256.\n     *\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\n     * (eg. small fractions or percentages).\n     */\n    function multiplyDecimalRound(int256 x, int256 y)\n        internal\n        pure\n        returns (int256)\n    {\n        return _multiplyDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is a high\n     * precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\n     * this is an integer division, the result is always rounded down.\n     * This helps save on gas. Rounding is more expensive on gas.\n     */\n    function divideDecimal(int256 x, int256 y) internal pure returns (int256) {\n        /* Reintroduce the UNIT factor that will be divided out by y. */\n        return x.mul(UNIT).div(y);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * decimal in the precision unit specified in the parameter.\n     *\n     * @dev y is divided after the product of x and the specified precision unit\n     * is evaluated, so the product of x and the specified precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function _divideDecimalRound(\n        int256 x,\n        int256 y,\n        int256 precisionUnit\n    ) private pure returns (int256) {\n        int256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\n\n        if (resultTimesTen % 10 >= 5) {\n            resultTimesTen += 10;\n        }\n\n        return resultTimesTen / 10;\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * standard precision decimal.\n     *\n     * @dev y is divided after the product of x and the standard precision unit\n     * is evaluated, so the product of x and the standard precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRound(int256 x, int256 y)\n        internal\n        pure\n        returns (int256)\n    {\n        return _divideDecimalRound(x, y, UNIT);\n    }\n\n    /**\n     * @return The result of safely dividing x and y. The return value is as a rounded\n     * high precision decimal.\n     *\n     * @dev y is divided after the product of x and the high precision unit\n     * is evaluated, so the product of x and the high precision unit must\n     * be less than 2**256. The result is rounded to the nearest increment.\n     */\n    function divideDecimalRoundPrecise(int256 x, int256 y)\n        internal\n        pure\n        returns (int256)\n    {\n        return _divideDecimalRound(x, y, PRECISE_UNIT);\n    }\n\n    /**\n     * @dev Convert a standard decimal representation to a high precision one.\n     */\n    function decimalToPreciseDecimal(int256 i) internal pure returns (int256) {\n        return i.mul(UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR);\n    }\n\n    /**\n     * @dev Convert a high precision decimal to a standard decimal representation.\n     */\n    function preciseDecimalToDecimal(int256 i) internal pure returns (int256) {\n        int256 quotientTimesTen =\n            i / (UNIT_TO_HIGH_PRECISION_CONVERSION_FACTOR / 10);\n\n        if (quotientTimesTen % 10 >= 5) {\n            quotientTimesTen += 10;\n        }\n\n        return quotientTimesTen / 10;\n    }\n}\n"
    },
    "contracts/Interfaces/IBlackScholes.sol": {
      "content": "//SPDX-License-Identifier: ISC\npragma solidity 0.8.6;\npragma experimental ABIEncoderV2;\n\ninterface IBlackScholes {\n    struct PricesDeltaStdVega {\n        uint256 callPrice;\n        uint256 putPrice;\n        int256 callDelta;\n        int256 putDelta;\n        uint256 stdVega;\n    }\n\n    function abs(int256 x) external pure returns (uint256);\n\n    function exp(uint256 x) external pure returns (uint256);\n\n    function exp(int256 x) external pure returns (uint256);\n\n    function sqrt(uint256 x) external pure returns (uint256 y);\n\n    function optionPrices(\n        uint256 timeToExpirySec,\n        uint256 volatilityDecimal,\n        uint256 spotDecimal,\n        uint256 strikeDecimal,\n        int256 rateDecimal\n    ) external pure returns (uint256 call, uint256 put);\n\n    function pricesDeltaStdVega(\n        uint256 timeToExpirySec,\n        uint256 volatilityDecimal,\n        uint256 spotDecimal,\n        uint256 strikeDecimal,\n        int256 rateDecimal\n    ) external pure returns (PricesDeltaStdVega memory);\n}\n"
    },
    "contracts/utils/Exerciser.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../OptionsManager/IOptionsManager.sol\";\nimport \"../Interfaces/Interfaces.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Exerciser Contract\n * @notice The contract that allows to automatically exercise options half an hour before expiration\n **/\ncontract Exerciser {\n    IOptionsManager immutable optionsManager;\n\n    constructor(IOptionsManager manager) {\n        optionsManager = manager;\n    }\n\n    function exercise(uint256 optionId) external {\n        IHegicPool pool = IHegicPool(optionsManager.tokenPool(optionId));\n        (, , , , uint256 expired, , ) = pool.options(optionId);\n        require(\n            block.timestamp > expired - 30 minutes,\n            \"Facade Error: Automatically exercise for this option is not available yet\"\n        );\n        pool.exercise(optionId);\n    }\n}\n"
    },
    "contracts/Facade/Facade.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../OptionsManager/IOptionsManager.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Facade Contract\n * @notice The contract that calculates the options prices,\n * conducts the process of buying options, converts the premiums\n * into the token that the pool is denominated in and grants\n * permissions to the contracts such as GSN (Gas Station Network).\n **/\n\ncontract Facade is Ownable {\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable WETH;\n    IUniswapV2Router01 public immutable exchange;\n    IOptionsManager public immutable optionsManager;\n    address public _trustedForwarder;\n\n    constructor(\n        IWETH weth,\n        IUniswapV2Router01 router,\n        IOptionsManager manager,\n        address trustedForwarder\n    ) {\n        WETH = weth;\n        exchange = router;\n        _trustedForwarder = trustedForwarder;\n        optionsManager = manager;\n    }\n\n    /**\n     * @notice Used for calculating the option price (the premium) and using\n     * the swap router (if needed) to convert the tokens with which the user\n     * pays the premium into the token in which the pool is denominated.\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     * @param total The total premium\n     * @param baseTotal The part of the premium that\n     * is distributed among the liquidity providers\n     * @param settlementFee The part of the premium that\n     * is distributed among the HEGIC staking participants\n     **/\n    function getOptionPrice(\n        IHegicPool pool,\n        uint256 period,\n        uint256 amount,\n        uint256 strike,\n        address[] calldata swappath\n    )\n        public\n        view\n        returns (\n            uint256 total,\n            uint256 baseTotal,\n            uint256 settlementFee,\n            uint256 premium\n        )\n    {\n        (uint256 _baseTotal, uint256 baseSettlementFee, uint256 basePremium) =\n            getBaseOptionCost(pool, period, amount, strike);\n        if (swappath.length > 1)\n            total = exchange.getAmountsIn(_baseTotal, swappath)[0];\n        else total = _baseTotal;\n\n        baseTotal = _baseTotal;\n        settlementFee = (total * baseSettlementFee) / baseTotal;\n        premium = (total * basePremium) / baseTotal;\n    }\n\n    /**\n     * @notice Used for calculating the option price (the premium)\n     * in the token in which the pool is denominated.\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     **/\n    function getBaseOptionCost(\n        IHegicPool pool,\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    )\n        public\n        view\n        returns (\n            uint256 total,\n            uint256 settlementFee,\n            uint256 premium\n        )\n    {\n        (settlementFee, premium) = pool.calculateTotalPremium(\n            period,\n            amount,\n            strike\n        );\n        total = premium + settlementFee;\n    }\n\n    /**\n     * @notice Used for approving the pools contracts addresses.\n     **/\n    function poolApprove(IHegicPool pool) external {\n        pool.token().safeApprove(address(pool), 0);\n        pool.token().safeApprove(address(pool), type(uint256).max);\n    }\n\n    /**\n     * @notice Used for buying the option contract and converting\n     * the buyer's tokens (the total premium) into the token\n     * in which the pool is denominated.\n     * @param period The option period\n     * @param amount The option size\n     * @param strike The option strike\n     * @param acceptablePrice The highest acceptable price\n     **/\n    function createOption(\n        IHegicPool pool,\n        uint256 period,\n        uint256 amount,\n        uint256 strike,\n        address[] calldata swappath,\n        uint256 acceptablePrice\n    ) external {\n        address buyer = _msgSender();\n        (uint256 optionPrice, uint256 rawOptionPrice, , ) =\n            getOptionPrice(pool, period, amount, strike, swappath);\n        require(\n            optionPrice <= acceptablePrice,\n            \"Facade Error: The option price is too high\"\n        );\n        IERC20 paymentToken = IERC20(swappath[0]);\n        paymentToken.safeTransferFrom(buyer, address(this), optionPrice);\n        if (swappath.length > 1) {\n            if (\n                paymentToken.allowance(address(this), address(exchange)) <\n                optionPrice\n            ) {\n                paymentToken.safeApprove(address(exchange), 0);\n                paymentToken.safeApprove(address(exchange), type(uint256).max);\n            }\n\n            exchange.swapTokensForExactTokens(\n                rawOptionPrice,\n                optionPrice,\n                swappath,\n                address(this),\n                block.timestamp\n            );\n        }\n        pool.sellOption(buyer, period, amount, strike);\n    }\n\n    /**\n     * @notice Used for converting the liquidity provider's Ether (ETH)\n     * into Wrapped Ether (WETH) and providing the funds into the pool.\n     * @param hedged The liquidity tranche type: hedged or unhedged (classic)\n     **/\n    function provideEthToPool(\n        IHegicPool pool,\n        bool hedged,\n        uint256 minShare\n    ) external payable returns (uint256) {\n        WETH.deposit{value: msg.value}();\n        if (WETH.allowance(address(this), address(pool)) < msg.value)\n            WETH.approve(address(pool), type(uint256).max);\n        return pool.provideFrom(msg.sender, msg.value, hedged, minShare);\n    }\n\n    /**\n     * @notice Unlocks the array of options.\n     * @param optionIDs The array of options\n     **/\n    function unlockAll(IHegicPool pool, uint256[] calldata optionIDs) external {\n        uint256 arrayLength = optionIDs.length;\n        for (uint256 i = 0; i < arrayLength; i++) {\n            pool.unlock(optionIDs[i]);\n        }\n    }\n\n    /**\n     * @notice Used for granting the GSN (Gas Station Network) contract\n     * the permission to pay the gas (transaction) fees for the users.\n     * @param forwarder GSN (Gas Station Network) contract address\n     **/\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\n        return forwarder == _trustedForwarder;\n    }\n\n    function claimAllStakingProfits(\n        IHegicStaking[] calldata stakings,\n        address account\n    ) external {\n        uint256 arrayLength = stakings.length;\n        for (uint256 i = 0; i < arrayLength; i++) {\n            IHegicStaking s = stakings[i];\n            if (s.profitOf(account) > 0) s.claimProfits(account);\n        }\n    }\n\n    function _msgSender() internal view override returns (address signer) {\n        signer = msg.sender;\n        if (msg.data.length >= 20 && isTrustedForwarder(signer)) {\n            assembly {\n                signer := shr(96, calldataload(sub(calldatasize(), 20)))\n            }\n        }\n    }\n\n    function exercise(uint256 optionId) external {\n        require(\n            optionsManager.isApprovedOrOwner(_msgSender(), optionId),\n            \"Facade Error: _msgSender is not eligible to exercise the option\"\n        );\n        IHegicPool(optionsManager.tokenPool(optionId)).exercise(optionId);\n    }\n\n    function versionRecipient() external pure returns (string memory) {\n        return \"2.2.2\";\n    }\n}\n"
    },
    "contracts/PriceCalculators/IVLPriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"../Interfaces/Interfaces.sol\";\nimport \"../utils/Math.sol\";\nimport \"./ScaledStrikePriceCalculator.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Price Calculator Contract\n * @notice The contract that calculates the options prices (the premiums)\n * that are adjusted through the `ImpliedVolRate` parameter.\n **/\n\ncontract IVLPriceCalculator is ScaledStrikePriceCalculator, IPriceCalculator {\n    using HegicMath for uint256;\n\n    uint256 public impliedVolRate;\n    uint256 internal immutable priceDecimals;\n    uint256 internal constant IVL_DECIMALS = 1e18;\n    uint256 public settlementFeeShare = 20;\n\n    constructor(\n        uint256 initialRate,\n        uint256 _priceCorrectionRate,\n        AggregatorV3Interface _priceProvider,\n        uint8 _roundedDecimals\n    )\n        ScaledStrikePriceCalculator(\n            _priceProvider,\n            _priceCorrectionRate,\n            _roundedDecimals\n        )\n    {\n        impliedVolRate = initialRate;\n        priceDecimals = 10**priceProvider.decimals();\n    }\n\n    /**\n     * @notice Used for adjusting the options prices (the premiums)\n     * while balancing the asset's implied volatility rate.\n     * @param value New IVRate value\n     **/\n    function setImpliedVolRate(uint256 value) external onlyOwner {\n        impliedVolRate = value;\n        emit SetImpliedVolRate(value);\n    }\n\n    /**\n     * @notice Used for adjusting the options prices (the premiums)\n     * while balancing the asset's implied volatility rate.\n     * @param value New settlementFeeShare value\n     **/\n    function setSettlementFeeShare(uint256 value) external onlyOwner {\n        require(value <= 100, \"The value is too large\");\n        settlementFeeShare = value;\n        emit SetSettlementFeeShare(value);\n    }\n\n    /**\n     * @notice Used for calculating the options prices\n     * @param period The option period in seconds (1 days <= period <= 90 days)\n     * @param amount The option size\n     * @param strike The option strike\n     * @return settlementFee The part of the premium that\n     * is distributed among the HEGIC staking participants\n     * @return premium The part of the premium that\n     * is distributed among the liquidity providers\n     **/\n    function calculateTotalPremium(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) public view override returns (uint256 settlementFee, uint256 premium) {\n        uint256 total = calculatePremium(period, amount, strike);\n        settlementFee = (total * settlementFeeShare) / 100;\n        premium = total - settlementFee;\n    }\n\n    function _checkParams(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    )\n        internal\n        view\n        virtual\n        override\n        returns (\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 sellingStrike =\n            (_currentPrice() * priceCorrectionRate) / PRICE_CORRECTION_DECIMALS;\n        if (strike == 0) strike = sellingStrike;\n        require(\n            strike == sellingStrike,\n            \"PriceCalculator: The strike is invalid\"\n        );\n        return super._checkParams(period, amount, strike);\n    }\n\n    /**\n     * @notice Calculates and prices in the time value of the option\n     * @param amount Option size\n     * @param period The option period in seconds (1 days <= period <= 90 days)\n     * @return fee The premium size to be paid\n     **/\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 /*strike*/\n    ) internal view virtual override returns (uint256 fee) {\n        return (amount * impliedVolRate * period.sqrt()) / IVL_DECIMALS;\n    }\n}\n"
    },
    "contracts/PriceCalculators/AdaptivePriceCalculator.sol": {
      "content": "pragma solidity 0.8.6;\n\n/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * Hegic\n * Copyright (C) 2021 Hegic Protocol\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\nimport \"./IVLPriceCalculator.sol\";\n\n/**\n * @author 0mllwntrmt3\n * @title Hegic Protocol V8888 Price Calculator Contract\n * @notice The contract that calculates the options prices (the premiums)\n * that are adjusted through the `ImpliedVolRate` parameter.\n **/\n\ncontract AdaptivePriceCalculator is IVLPriceCalculator {\n    IHegicPool public immutable pool;\n\n    uint256 internal constant PRICE_MODIFIER_DECIMALS = 1e8;\n    uint256 public utilizationRate = 0;\n\n    // uint256 public utilizationRate = 1e8;\n\n    constructor(\n        uint256 initialRate,\n        uint256 priceCorrectorRate,\n        AggregatorV3Interface _priceProvider,\n        IHegicPool _pool\n    ) IVLPriceCalculator(initialRate, priceCorrectorRate, _priceProvider, 0) {\n        pool = _pool;\n    }\n\n    /**\n     * @notice Calculates and prices in the time value of the option\n     * @param amount Option size\n     * @param period The option period in seconds (1 days <= period <= 90 days)\n     * @return fee The premium size to be paid\n     **/\n    function _calculatePeriodFee(\n        uint256 period,\n        uint256 amount,\n        uint256 strike\n    ) internal view override returns (uint256 fee) {\n        return\n            (super._calculatePeriodFee(period, amount, strike) *\n                _priceModifier(amount)) / PRICE_MODIFIER_DECIMALS;\n    }\n\n    /**\n     * @notice Calculates `periodFee` of the option\n     * @param amount The option size\n     **/\n    function _priceModifier(uint256 amount) internal view returns (uint256 iv) {\n        uint256 poolBalance = pool.totalBalance();\n        if (poolBalance == 0) return PRICE_MODIFIER_DECIMALS;\n\n        uint256 lockedAmount = pool.lockedAmount() + _lockedAmount(amount);\n        uint256 utilization = (lockedAmount * 100e8) / poolBalance;\n\n        if (utilization < 40e8) return PRICE_MODIFIER_DECIMALS;\n\n        return\n            PRICE_MODIFIER_DECIMALS +\n            (PRICE_MODIFIER_DECIMALS * (utilization - 40e8) * utilizationRate) /\n            60e16;\n    }\n\n    function _lockedAmount(uint256 amount)\n        internal\n        view\n        virtual\n        returns (uint256)\n    {\n        return amount;\n    }\n\n    function setUtilizationRate(uint256 value) external onlyOwner {\n        utilizationRate = value;\n    }\n}\n\ncontract AdaptivePutPriceCalculator is AdaptivePriceCalculator {\n    uint256 private immutable SpotDecimals;\n    uint256 private constant TokenDecimals = 1e6;\n\n    constructor(\n        uint256 initialRate,\n        uint256 priceCorrectorRate,\n        AggregatorV3Interface _priceProvider,\n        IHegicPool _pool,\n        uint8 spotDecimals\n    )\n        AdaptivePriceCalculator(\n            initialRate,\n            priceCorrectorRate,\n            _priceProvider,\n            _pool\n        )\n    {\n        SpotDecimals = 10**spotDecimals;\n    }\n\n    function _lockedAmount(uint256 amount)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        return\n            (amount *\n                pool.collateralizationRatio() *\n                _currentPrice() *\n                TokenDecimals) /\n            SpotDecimals /\n            1e8 /\n            100;\n    }\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IWETH.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Callee {\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "pragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n    }\n\n    function safeTransfer(address token, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n    }\n\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n    }\n\n    function safeTransferETH(address to, uint value) internal {\n        (bool success,) = to.call{value:value}(new bytes(0));\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}